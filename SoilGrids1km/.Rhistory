library(GSIF)
library(sp)
library(boot)
library(aqp)
library(plyr)
library(rpart)
library(splines)
library(gstat)
library(randomForest)
library(quantregForest)
library(plotKML)
## load the Meuse data set:
demo(meuse, echo=FALSE)
## simple model:
omm <- fit.gstatModel(meuse, om~dist+ffreq, meuse.grid,
family = gaussian(log))
om.rk <- predict(omm, meuse.grid)
plot(om.rk)
plotKML(om.rk)
plotKML(om.rk, colour_scale=SAGA_pal[[1]])
library(RSAGA)
rsaga.env()
library(gdalUtils)
install.packages("gdalUtils")
library(gdalUtils)
gdal.dir = shortPathName("C:\\Program Files\\GDAL")
gdal_setInstallation(search_path=gdal.dir, rescan=TRUE)
gdalinfo(version=TRUE)
getwd()
writeGDAL(om.rk@predicted[3], "test.sdat", "SAGA")
library(rgdal)
writeGDAL(om.rk@predicted[3], "test.sdat", "SAGA")
writeGDAL(om.rk@predicted[3], "om.rk.sdat", "SAGA")
writeGDAL(om.rk@predicted[4], "om.rk.sdat", "SAGA")
writeOGR(om.rk@observed, "meuse.shp", "ESRI Shapefile")
writeOGR(om.rk@observed, "meuse.shp", "meuse", "ESRI Shapefile")
library(aqp)
library(splines)
library(GSIF)
library(plyr)
library(splines)
library(plotKML)
library(rgdal)
data(SAGA_pal)
data(edgeroi)
## simple example with Clay content:
edgeroi.spc <- join(edgeroi$sites, edgeroi$horizons, type='inner')
h1 <- edgeroi.spc[edgeroi.spc$LSQINT==1,c("SOURCEID","LONGDA94","LATGDA94","ORCDRC","PHIHO5","CLYPPT")]
coordinates(h1) <- ~ LONGDA94 + LATGDA94
proj4string(h1) <- CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs")
h1.xy <- spTransform(h1, CRS("+init=epsg:28355"))
## load the 250 m grids:
con <- url("http://gsif.isric.org/lib/exe/fetch.php?media=edgeroi.grids.rda")
load(con)
gridded(edgeroi.grids) <- ~x+y
proj4string(edgeroi.grids) <- CRS("+init=epsg:28355")
m <- fit.gstatModel(h1.xy, CLYPPT~DEMSRT5+TWISRT5+PMTGEO5+EV1MOD5+EV2MOD5+EV3MOD5, edgeroi.grids)
m@vgmModel
rk <- predict(m, edgeroi.grids)
plotKML(rk)
getwd()
library(plotKML)
library(sp)
library(snowfall)
library(GSIF)
library(rgdal)
fn = system.file("pictures/SP27GTIF.TIF",
package = "rgdal")
obj <- GDALinfo(fn)
tiles <- getSpatialTiles(obj, block.x=5000,
return.SpatialPolygons = FALSE)
## plot using tiles:
plotKML.GDALobj(obj, tiles=tiles, z.lim=c(0,185), colour_scale=SAGA_pal[1])
install.packages("snowfall")
library(snowfall)
plotKML.GDALobj(obj, tiles=tiles, z.lim=c(0,185), colour_scale=SAGA_pal[1])
plotKML.GDALobj(obj, tiles=tiles, z.lim=c(0,185))
library(RSAGA)
?rsaga.slope
setwd("~/")
setwd("D:\\GSIF_tutorials\\trunk\\SoilGrids1km")
library(RCurl)
sg.ftp <- "ftp://soilgrids:soilgrids@ftp.soilgrids.org/data/recent/"
filenames = getURL(sg.ftp, ftp.use.epsv = FALSE, dirlistonly = TRUE)
filenames = strsplit(filenames, "\r*\n")[[1]]
View(filenames)
filenames[1:5]
ORC.tif <- strsplit(ORC.name[1], ".gz")[[1]][1]
ORC.name
ORC.name <- filenames[grep(filenames, pattern="ORCDRC_sd1_M")]
ORC.name
ORC.tif <- strsplit(ORC.name[1], ".gz")[[1]][1]
library(rgdal)
GDALinfo(ORC.tif)
wg.url <- url("http://gsif.isric.org/lib/exe/fetch.php?media=admin.af.rda")
load(wg.url)
proj4string(admin.af) <- "+proj=longlat +datum=WGS84"
country.af <- as(admin.af, "SpatialLines")
## Ghana bounding box:
ghana <- admin.af[admin.af$FORMAL_EN=="Republic of Ghana",]
ghana@bbox
library(GSIF)
data(afsp)
sites <- afsp$sites
coordinates(sites) <- ~ LONWGS84 + LATWGS84
proj4string(sites) <- "+proj=longlat +datum=WGS84"
#af.csy = "+proj=laea +lat_0=5 +lon_0=20 +x_0=0 +y_0=0 +units=m +ellps=WGS84 +datum=WGS84"
#sites.af <- spTransform(sites, CRS(af.csy))
## plot country and profiles
plot(ghana, col="red", lwd=2, asp=1)
lines(country.af)
points(sites, pch="+")
wcs = "http://wms3.isric.org/geoserver/soilgrids1km/wcs?"
library(XML)
l1 <- newXMLNode("WCS_GDAL")
l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
l1.l <- newXMLNode("CoverageName", "ORCDRC_sd1_M", parent=l1)
l1
xml.out = "ORCDRC_sd1_M.xml"
saveXML(l1, file=xml.out)
gdalinfo(xml.out)
library(raster)
library(gdalUtils)
getOption("gdalUtils_gdalPath")
gdal.dir <- shortPathName("C:/Program files/GDAL")
gdal_setInstallation(search_path=gdal.dir, rescan=TRUE)
getOption("gdalUtils_gdalPath")
gdalinfo(xml.out)
bb <- matrix(nrow=2, c(-180,-90,180,90))
o.x = 43200 + round(43200*(te[1]-bb[1,2])/(bb[1,2]-bb[1,1]))
o.y = round(21600*(bb[2,2]-te[4])/(bb[2,2]-bb[2,1]))
d.y = round(21600*(te[4]-te[2])/(bb[2,2]-bb[2,1]))
d.x = round(43200*(te[3]-te[1])/(bb[1,2]-bb[1,1]))
o.x; o.y; d.x; d.y
te = as.vector(ghana@bbox)
o.x = 43200 + round(43200*(te[1]-bb[1,2])/(bb[1,2]-bb[1,1]))
o.y = round(21600*(bb[2,2]-te[4])/(bb[2,2]-bb[2,1]))
d.y = round(21600*(te[4]-te[2])/(bb[2,2]-bb[2,1]))
d.x = round(43200*(te[3]-te[1])/(bb[1,2]-bb[1,1]))
o.x; o.y; d.x; d.y
gdal_translate(src_dataset=xml.out, dst_dataset="ORC_sd1_Ghana.tif", of="GTiff", srcwin=paste(c(o.x, o.y, d.x, d.y), collapse=" "))
ORCDRC_sd1_ghana <- readGDAL("ORC_sd1_Ghana.tif")
data(soil.legends)
class.labels = paste(soil.legends[["ORCDRC"]]$MIN, "\226", soil.legends[["ORCDRC"]]$MAX)
ORCDRC_sd1_ghana$val <- cut(ORCDRC_sd1_ghana$band1, breaks=c(soil.legends[["ORCDRC"]]$MIN[1], soil.legends[["ORCDRC"]]$MAX), labels = class.labels)
bnd <- list(list("sp.points", sites, pch="+", col="black"), list("sp.lines", country.af))
spplot(ORCDRC_sd1_ghana["val"], col.regions=soil.legends[["ORCDRC"]]$COLOR, sp.layout=bnd, scales=list(draw=TRUE), main="Organic carbon in permilles (0\2265 cm)")
library(rjson)
library(sp)
pnts <- data.frame(lon=c(10.65,5.36), lat=c(51.81,51.48), id=c("p1","p2"))
coordinates(pnts) <- ~lon+lat
proj4string(pnts) <- CRS("+proj=longlat +datum=WGS84")
pnts
soilgrids.r <- REST.SoilGrids(c("ORCDRC","PHIHOX"))
soilgrids.r
ov <- over(soilgrids.r, pnts)
str(ov)
View(ov)
ORCDRC.pnt1 <- data.frame(
top=unlist(ov[1,grep("depthCodesMeters", names(ov))])*-100,
M=unlist(ov[1,grep("ORCDRC.M", names(ov))]),
L=unlist(ov[1,grep("ORCDRC.L", names(ov))]),
U=unlist(ov[1,grep("ORCDRC.U", names(ov))]))
ORCDRC.pnt1$variable <- "ORCDRC"
## plot the result:
library(lattice)
library(aqp)
data(soil.legends)
## Soil organic carbon:
ORCDRC.range = range(soil.legends[["ORCDRC"]]$MIN, soil.legends[["ORCDRC"]]$MAX)
dev.new(width=5, height=6)
xyplot(top ~ M | variable, data=ORCDRC.pnt1, ylab='Depth in cm',
xlab='5th and 95th percentiles', xlim=ORCDRC.range,
lower=ORCDRC.pnt1$L, upper=ORCDRC.pnt1$U, ylim=c(150,0),
panel=panel.depth_function,
alpha=0.25, sync.colors=TRUE,
par.settings=list(superpose.line=list(col='RoyalBlue', lwd=3)),
strip=strip.custom(bg=grey(0.8))
)
?REST.SoilGrids
PHIHOX.range = range(soil.legends[["PHIHOX"]]$MIN, soil.legends[["PHIHOX"]]$MAX)
for(i in 1:nrow(ov)){
PHIHOX.pnt <- data.frame(
top=unlist(ov[i,grep("depthCodesMeters", names(ov))])*-100,
M=unlist(ov[i,grep("PHIHOX.M", names(ov))]),
L=unlist(ov[i,grep("PHIHOX.L", names(ov))]),
U=unlist(ov[i,grep("PHIHOX.U", names(ov))]))
PHIHOX.pnt$variable <- "PHIHOX"
png(paste("PHIHOX_depth_", i, ".png", sep=""), width=300, height=6/5*300)
p <- xyplot(top ~ M/10 | variable, data=PHIHOX.pnt, ylab='Depth in cm',
xlab='5th and 95th percentiles', xlim=PHIHOX.range/10,
lower=PHIHOX.pnt$L/10, upper=PHIHOX.pnt$U/10, ylim=c(150,0),
panel=panel.depth_function,
alpha=0.25, sync.colors=TRUE,
par.settings=list(superpose.line=list(col='Red', lwd=3)),
strip=strip.custom(bg=grey(0.8))
)
print(p)
graphics.off()
}
## plot in Google Earth:
library(plotKML)
kml(pnts, colour=id, file="PHIHOX_depth.kml",
shape=paste("PHIHOX_depth_", 1:nrow(ov), ".png", sep=""),
size=6, points_names=pnts$id,
colour_scale=rep("#FFFFFF", 2))
pnts <- data.frame(lon=c(10.65,5.36), lat=c(51.81,52.48), id=c("p1","p2"))
coordinates(pnts) <- ~lon+lat
proj4string(pnts) <- CRS("+proj=longlat +datum=WGS84")
ov <- over(soilgrids.r, pnts)
PHIHOX.range = range(soil.legends[["PHIHOX"]]$MIN, soil.legends[["PHIHOX"]]$MAX)
for(i in 1:nrow(ov)){
PHIHOX.pnt <- data.frame(
top=unlist(ov[i,grep("depthCodesMeters", names(ov))])*-100,
M=unlist(ov[i,grep("PHIHOX.M", names(ov))]),
L=unlist(ov[i,grep("PHIHOX.L", names(ov))]),
U=unlist(ov[i,grep("PHIHOX.U", names(ov))]))
PHIHOX.pnt$variable <- "PHIHOX"
png(paste("PHIHOX_depth_", i, ".png", sep=""), width=300, height=6/5*300)
p <- xyplot(top ~ M/10 | variable, data=PHIHOX.pnt, ylab='Depth in cm',
xlab='5th and 95th percentiles', xlim=PHIHOX.range/10,
lower=PHIHOX.pnt$L/10, upper=PHIHOX.pnt$U/10, ylim=c(150,0),
panel=panel.depth_function,
alpha=0.25, sync.colors=TRUE,
par.settings=list(superpose.line=list(col='Red', lwd=3)),
strip=strip.custom(bg=grey(0.8))
)
print(p)
graphics.off()
}
## plot in Google Earth:
library(plotKML)
kml(pnts, colour=id, file="PHIHOX_depth.kml",
shape=paste("PHIHOX_depth_", 1:nrow(ov), ".png", sep=""),
size=6, points_names=pnts$id,
colour_scale=rep("#FFFFFF", 2))
str(sites)
bbox
bb
class(ghana)
ghana@bbox
str(sites@coords)
sel <- sites@coords[,1]<ghana@bbox[1,2] & sites@coords[,1]>ghana@bbox[1,1] & sites@coords[,2]<ghana@bbox[2,2] & sites@coords[,2]<ghana@bbox[1,2]
summary(sel)
sel <- sites@coords[,1]<ghana@bbox[1,2] & sites@coords[,1]>ghana@bbox[1,1] & sites@coords[,2]<ghana@bbox[2,2] & sites@coords[,2]>ghana@bbox[1,2]
summary(sel)
pnt <- sites[sel,]
pnts <- sites[sel,]
ov <- over(soilgrids.r, pnts)
pnts <- sites[sel[1:100],]
pnts <- sites[sel,][1:100]
pnts <- sites[sel,][1:100,]
plot(pnts)
pnts <- sites[sel,][400:500,]
plot(pnts)
soilgrids.r <- REST.SoilGrids(c("ORCDRC","PHIHOX"))
ov <- over(soilgrids.r, pnts)
View(ov)
PHIHOX.range = range(soil.legends[["PHIHOX"]]$MIN, soil.legends[["PHIHOX"]]$MAX)
for(i in 1:nrow(ov)){
PHIHOX.pnt <- data.frame(
top=unlist(ov[i,grep("depthCodesMeters", names(ov))])*-100,
M=unlist(ov[i,grep("PHIHOX.M", names(ov))]),
L=unlist(ov[i,grep("PHIHOX.L", names(ov))]),
U=unlist(ov[i,grep("PHIHOX.U", names(ov))]))
PHIHOX.pnt$variable <- "PHIHOX"
png(paste("PHIHOX_depth_", i, ".png", sep=""), width=300, height=6/5*300)
p <- xyplot(top ~ M/10 | variable, data=PHIHOX.pnt, ylab='Depth in cm',
xlab='5th and 95th percentiles', xlim=PHIHOX.range/10,
lower=PHIHOX.pnt$L/10, upper=PHIHOX.pnt$U/10, ylim=c(150,0),
panel=panel.depth_function,
alpha=0.25, sync.colors=TRUE,
par.settings=list(superpose.line=list(col='Red', lwd=3)),
strip=strip.custom(bg=grey(0.8))
)
print(p)
graphics.off()
}
## plot in Google Earth:
library(plotKML)
kml(pnts, colour=id, file="PHIHOX_depth.kml",
shape=paste("PHIHOX_depth_", 1:nrow(ov), ".png", sep=""),
size=6, points_names=pnts$id,
colour_scale=rep("#FFFFFF", 2))
str(pnts)
kml(pnts, colour=SOURCEID, file="PHIHOX_depth.kml",
shape=paste("PHIHOX_depth_", 1:nrow(ov), ".png", sep=""),
size=6, points_names=pnts$id,
colour_scale=rep("#FFFFFF", 2))
kml(pnts, colour=SOURCEID, file="PHIHOX_depth.kml",
shape=paste("PHIHOX_depth_", 1:nrow(ov), ".png", sep=""),
size=6, points_names=pnts$SOURCEID,
colour_scale=rep("#FFFFFF", 2))
library(gdalUtils)
getOption("gdalUtils_gdalPath")
gdalinfo(xml.out)
