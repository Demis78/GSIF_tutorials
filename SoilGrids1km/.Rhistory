library(rgdal)
library(plotKML)
library(GSIF)
library(raster)
## obtain country borders:
library(maps)
country.m = map('world', plot=FALSE, fill=TRUE)
IDs <- sapply(strsplit(country.m$names, ":"), function(x) x[1])
require(maptools)
country <- as(map2SpatialPolygons(country.m, IDs=IDs), "SpatialLines")
proj4string(country) = "+proj=longlat +datum=WGS84"
str(country@data)
str(country.m)
country.pol <- map2SpatialPolygons(country.m, IDs=IDs)
proj4string(country.pol) = "+proj=longlat +datum=WGS84"
str(country.pol@data)
country.pol <- map2SpatialPolygonsDataFrame(country.m, IDs=IDs)
proj4string(country.pol) = "+proj=longlat +datum=WGS84"
plot(country.pol)
rm(list=ls(all=TRUE))
library(rgdal)
library(plotKML)
library(GSIF)
library(raster)
## We focus on Ghana
## obtain country borders:
data(afsp)
sites <- afsp$sites
coordinates(sites) <- ~ LONWGS84 + LATWGS84
proj4string(sites) <- "+proj=longlat +datum=WGS84"
af.csy = "+proj=laea +lat_0=5 +lon_0=20 +x_0=0 +y_0=0 +units=m +ellps=WGS84 +datum=WGS84"
sites.af <- spTransform(sites, CRS(af.csy))
wg.url = "http://gsif.isric.org/lib/exe/fetch.php?media="
if(is.na(file.info("admin.af.rda")$size)){
  download.file(paste(wg.url, "admin.af.rda", sep=""), "admin.af.rda")
}
load("admin.af.rda")
proj4string(admin.af)
proj4string(admin.af) <- "+proj=longlat +datum=WGS84"
admin.xy <- spTransform(admin.af, CRS(af.csy))
q()
library(rgdal)
library(plotKML)
library(GSIF)
library(raster)
library(RCurl)
sg.ftp <- "ftp://soilgrids:soilgrids@ftp.soilgrids.org/data/5.Dec.2013/"
filenames = getURL(sg.ftp, ftp.use.epsv = FALSE, dirlistonly = TRUE)
filenames = strsplit(filenames, "\r*\n")[[1]]
filenames[1:5]
str(filenames)
ORC.name <- filenames[grep(filenames, pattern="ORCDRC_sd1_M")]
ORC.name
try(download.file(paste(sg.ftp, ORC.name, sep=""), ORC.name))
library(R.utils)
gunzip(ORC.name)
wg.url = "http://gsif.isric.org/lib/exe/fetch.php?media="
if(is.na(file.info("admin.af.rda")$size)){
  download.file(paste(wg.url, "admin.af.rda", sep=""), "admin.af.rda")
}
load("admin.af.rda")
proj4string(admin.af) <- "+proj=longlat +datum=WGS84"
country.af <- as(admin.af, "SpatialLines")
## Ghana bounding box:
ghana <- admin.af[admin.af$formal_en=="Republic of Ghana",]
wg.url = "http://gsif.isric.org/lib/exe/fetch.php?media="
if(is.na(file.info("admin.af.rda")$size)){
  download.file(paste(wg.url, "admin.af.rda", sep=""), "admin.af.rda")
}
load("admin.af.rda")
proj4string(admin.af) <- "+proj=longlat +datum=WGS84"
country.af <- as(admin.af, "SpatialLines")
## Ghana bounding box:
ghana <- admin.af[admin.af$formal_en=="Republic of Ghana",]
ghana@bbox
library(GSIF)
data(afsp)
sites <- afsp$sites
coordinates(sites) <- ~ LONWGS84 + LATWGS84
proj4string(sites) <- "+proj=longlat +datum=WGS84"
plot(ghana, col="red", lwd=2)
lines(country.af)
points(sites, pch="+")
plot(ghana, col="red", lwd=2, asp=1)
lines(country.af)
points(sites, pch="+")
ORC.tif <- strsplit(ORC.name, ".gz")[[1]][1]
GDALinfo(ORC.tif)
library(gdalUtils)
gdal_setInstallation()
te = as.vector(ghana@bbox)
gdalwarp(ORC.tif, dstfile="ORC_sd1_Ghana.tif", te=te)
ORCDRC_sd1_ghana <- readGDAL("ORC_sd1_Ghana.tif")
library(XML)
## location of service:
wcs = "http://wms3.isric.org/geoserver/soilgrids1km/wcs?"
## create an XML file:
l1 <- newXMLNode("WCS_GDAL")
l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
l1.l <- newXMLNode("CoverageName", var.name[1], parent=l1)
l1
xml.out <- paste(var.name[1], ".xml", sep="")
saveXML(l1, file=xml.out)
gdalinfo(xml.out)
bb <- matrix(nrow=2, c(-180,-90,180,90))
o.x = 43200 + round(43200*(te[1]-bb[1,2])/(bb[1,2]-bb[1,1]))
o.y = round(21600*(bb[2,2]-te[4])/(bb[2,2]-bb[2,1]))
d.y = round(21600*(te[4]-te[2])/(bb[2,2]-bb[2,1]))
d.x = round(43200*(te[3]-te[1])/(bb[1,2]-bb[1,1]))
o.x; o.y; d.x; d.y
gdal_translate(src_dataset=xml.out, dst_dataset="test.tif", of="GTiff", srcwin=paste(c(o.x, o.y, d.x, d.y), collapse=" "))
GDALinfo("test.tif")
data(soil.legends)
class.labels = paste(soil.legends[["ORCDRC"]]$MIN, "\226", soil.legends[["ORCDRC"]]$MAX)
ORCDRC_sd1_ghana$val <- cut(ORCDRC_sd1_ghana$band1, breaks=c(soil.legends[["ORCDRC"]]$MIN[1], soil.legends[["ORCDRC"]]$MAX), labels = class.labels)
bnd <- list(list("sp.points", sites, pch="+", col="black"), list("sp.lines", country.af))
spplot(ORCDRC_sd1_ghana["val"], col.regions=soil.legends[["ORCDRC"]]$COLOR, sp.layout=bnd, scales=list(draw=TRUE), main="Organic carbon in permilles (0\2265 cm)")
library(plotKML)
plotKML(ORCDRC_sd1_ghana["val"], colour_scale=soil.legends[["ORCDRC"]]$COLOR)
## variables of interest:
var.name <- c(paste("ORCDRC_sd", c(1,3,5), sep=""), paste("BLD_sd", c(1,3,5), sep=""), paste("CRFVOL_sd", c(1,3,5), sep=""))
## layers of interest:
var.name <- c(paste("ORCDRC_sd", c(1,3,5), sep=""), paste("BLD_sd", c(1,3,5), sep=""), paste("CRFVOL_sd", c(1,3,5), sep=""))
## now run everything in a loop...
for(i in 1:length(var.name)){
 t1 <- newXMLNode("WCS_GDAL")
 t1.s <- newXMLNode("ServiceURL", wcs, parent=t1)
 t1.l <- newXMLNode("CoverageName", var.name[i], parent=t1)
 xml.out <- paste(var.name[i], ".xml", sep="")
 saveXML(t1, file=xml.out)
 f.name <- paste(var.name[i], "_Ghana.tif", sep="")
 if(!file.exists(f.name)){
   gdal_translate(src_dataset=xml.out, dst_dataset=f.name, of="GTiff", srcwin=paste(c(o.x, o.y, d.x, d.y), collapse=" "))
 }
}
library(raster)
ghana1km <- stack(paste(var.name, "_Ghana.tif", sep=""))
ghana1km <- as(ghana1km, "SpatialGridDataFrame")
str(ghana1km@data)
soc <- function(ORCDRC, BLD, CRFVOL, HSIZE){ ORCDRC/1000 * HSIZE * BLD * (100-CRFVOL)/100 }
soc(50, 1200, 12, .3)
sds <- get("stsize", envir = GSIF.opts)
sds
for(j in c(1,3,5)){
 ghana1km@data[,paste("SOC_sd", j, sep="")] <- soc(ghana1km@data[,paste("ORCDRC_sd", j, "_Ghana",sep="")], ghana1km@data[,paste("BLD_sd", j, "_Ghana",sep="")], ghana1km@data[,paste("CRFVOL_sd", j, "_Ghana",sep="")], HSIZE=sds[j])
}
## aggregate values:
ghana1km$SOC <- rowSums(ghana1km@data[,paste("SOC_sd", c(1,3,5), sep="")], na.rm=TRUE)
## mask out missing pixels:
ghana1km$SOC <- ifelse(ghana1km$ORCDRC_sd1_Ghana==-9999, NA, ghana1km$SOC)
rg <- range(ghana1km$SOC, na.rm=TRUE)
at <- expm1(seq(log1p(rg[1]), log1p(rg[2]), length.out=20))
data(R_pal)
spplot(ghana1km["SOC"], at=at, col.regions=R_pal[["soc_pal"]], sp.layout=bnd, scales=list(draw=TRUE), main="Total soil carbon stock in kg per square meter")
q()
source('C:/Roaming/Tinn-R/tmp/sgInfo.R')
startSocketServer(port=8889)
library(RCurl)
filenames[1:5]
ORC.name
ORC.name <- filenames[grep(filenames, pattern="ORCDRC_sd1_M")]
ORC.name
sg.ftp <- "ftp://soilgrids:soilgrids@ftp.soilgrids.org/data/recent/"
filenames = getURL(sg.ftp, ftp.use.epsv = FALSE, dirlistonly = TRUE)
filenames = strsplit(filenames, "\r*\n")[[1]]
filenames[1:5]
ORC.name <- filenames[grep(filenames, pattern="ORCDRC_sd1_M")]
ORC.name
try(download.file(paste(sg.ftp, ORC.name[1], sep=""), ORC.name))
library(R.utils)
ORC.tif <- strsplit(ORC.name[1], ".gz")[[1]][1]
library(rgdal)
GDALinfo(ORC.tif)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
library(gdalUtils)
getOption("gdalUtils_gdalPath")
gdal_setInstallation() ## CAN TAKE 1-2 MINUTES!
te = as.vector(ghana@bbox)
unlink("ORC_sd1_Ghana.tif")
gdalwarp(ORC.tif, dstfile="ORC_sd1_Ghana.tif", te=te)
ORCDRC_sd1_ghana <- readGDAL("ORC_sd1_Ghana.tif")
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
gdalinfo(xml.out)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
gdal_translate(src_dataset=xml.out, dst_dataset="ORC_sd1_Ghana.tif", of="GTiff", srcwin=paste(c(o.x, o.y, d.x, d.y), collapse=" "))
GDALinfo("ORC_sd1_Ghana.tif")
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
spplot(TAXUSDA_ghana["val"], col.regions=soil.legends[["TAXOUSDA"]]$COLOR, sp.layout=bnd, scales=list(draw=TRUE), main="Soil suborders based on USDA Taxonomy")
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
library(raster)
ghana1km <- stack(paste(var.name, "_Ghana.tif", sep=""))
ghana1km <- as(ghana1km, "SpatialGridDataFrame")
str(ghana1km@data)
soc <- function(ORCDRC, BLD, CRFVOL, HSIZE){ ORCDRC/1000 * HSIZE * BLD * (100-CRFVOL)/100 }
soc(50, 1200, 12, .3)
sds <- get("stsize", envir = GSIF.opts)
library(GSIF)
sds <- get("stsize", envir = GSIF.opts)
sds
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
ghana1km$SOC <- rowSums(ghana1km@data[,paste("SOC_sd", c(1,3,5), "_M", sep="")], na.rm=TRUE)
ghana1km$SOC <- ifelse(ghana1km$ORCDRC_sd1_Ghana==-9999, NA, ghana1km$SOC)
ghana1km$SOC <- ifelse(ghana1km$ORCDRC_sd1_M_Ghana==-9999, NA, ghana1km$SOC)
rg <- range(ghana1km$SOC, na.rm=TRUE)
at <- expm1(seq(log1p(rg[1]), log1p(rg[2]), length.out=20))
data(R_pal)
library(plotKML)
data(R_pal)
spplot(ghana1km["SOC"], at=at, col.regions=R_pal[["soc_pal"]], sp.layout=bnd, scales=list(draw=TRUE), main="Total soil carbon stock in kg per square meter")
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
for(j in c(1,2,3)){
 ghana1km@data[,paste("SOC_sd", j, "_M", sep="")] <- soc(ghana1km@data[,paste("ORCDRC_sd", j, "_M_Ghana",sep="")], ghana1km@data[,paste("BLD_sd", j, "_M_Ghana", sep="")], ghana1km@data[,paste("CRFVOL_sd", j, "_M_Ghana", sep="")], HSIZE=sds[j])
}
## aggregate values:
ghana1km$SOC <- rowSums(ghana1km@data[,paste("SOC_sd", c(1,3,5), "_M", sep="")], na.rm=TRUE)
## mask out missing pixels:
ghana1km$SOC <- ifelse(ghana1km$ORCDRC_sd1_M_Ghana==-9999, NA, ghana1km$SOC)
rg <- range(ghana1km$SOC, na.rm=TRUE)
at <- expm1(seq(log1p(rg[1]), log1p(rg[2]), length.out=20))
library(plotKML)
data(R_pal)
spplot(ghana1km["SOC"], at=at, col.regions=R_pal[["soc_pal"]], sp.layout=bnd, scales=list(draw=TRUE), main="Total soil carbon stock in kg per square meter")
ghana1km$SOC <- rowSums(ghana1km@data[,paste("SOC_sd", c(1,2,3), "_M", sep="")], na.rm=TRUE)
ghana1km$SOC <- ifelse(ghana1km$ORCDRC_sd1_M_Ghana==-9999, NA, ghana1km$SOC)
rg <- range(ghana1km$SOC, na.rm=TRUE)
at <- expm1(seq(log1p(rg[1]), log1p(rg[2]), length.out=20))
library(plotKML)
data(R_pal)
spplot(ghana1km["SOC"], at=at, col.regions=R_pal[["soc_pal"]], sp.layout=bnd, scales=list(draw=TRUE), main="Total soil carbon stock in kg per square meter")
spplot(ghana1km["SOC"], at=at, col.regions=R_pal[["soc_pal"]], sp.layout=bnd, scales=list(draw=TRUE), main="Total soil carbon stock (0\22630 cm) in kg per square meter")
rg <- quantile(ghana1km$SOC, c(0.025, 0.975))
rg <- quantile(ghana1km$SOC, c(0.025, 0.975), na.rm=TRUE)
rg
at <- expm1(seq(log1p(rg[1]), log1p(rg[2]), length.out=20))
at
data(R_pal)
spplot(ghana1km["SOC"], at=at, col.regions=R_pal[["soc_pal"]], sp.layout=bnd, scales=list(draw=TRUE), main="Total soil carbon stock (0\22630 cm) in kg per square meter")
rg <- quantile(ghana1km$SOC, c(0.01, 0.99), na.rm=TRUE)
rg
ghana1km$SOCf <- ifelse(ghana1km$SOC<rg[1], rg[1], ifelse(ghana1km$SOC>rg[2], rg[2], ghana1km$SOC))
spplot(ghana1km["SOCf"], at=at, col.regions=R_pal[["soc_pal"]], sp.layout=bnd, scales=list(draw=TRUE), main="Total soil carbon stock (0\22630 cm) in kg per square meter")
summary(ghana1km$SOCf)
rg[1]
at <- expm1(seq(log1p(rg[1]), log1p(rg[2]), length.out=20))
library(plotKML)
data(R_pal)
ghana1km$SOCf <- ifelse(ghana1km$SOC<rg[1], rg[1], ifelse(ghana1km$SOC>rg[2], rg[2], ghana1km$SOC))
spplot(ghana1km["SOCf"], at=at, col.regions=R_pal[["soc_pal"]], sp.layout=bnd, scales=list(draw=TRUE), main="Total soil carbon stock (0\22630 cm) in kg per square meter")
sds <- get("stsize", envir = GSIF.opts)
sds
for(j in c(1,2,3)){
 ghana1km@data[,paste("SOC_sd", j, "_M", sep="")] <- soc(ghana1km@data[,paste("ORCDRC_sd", j, "_M_Ghana",sep="")], ghana1km@data[,paste("BLD_sd", j, "_M_Ghana", sep="")], ghana1km@data[,paste("CRFVOL_sd", j, "_M_Ghana", sep="")], HSIZE=sds[j])
}
## aggregate values:
ghana1km$SOC <- rowSums(ghana1km@data[,paste("SOC_sd", c(1,2,3), "_M", sep="")], na.rm=TRUE)
## mask out missing pixels:
ghana1km$SOC <- ifelse(ghana1km$ORCDRC_sd1_M_Ghana==-9999, NA, ghana1km$SOC)
rg <- quantile(ghana1km$SOC, c(0.01, 0.99), na.rm=TRUE)
?REST.SoilGrids
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
ov
str(ov)
save.image("D:\\GSIF\\code\\trunk\\SoilGrids1km\\.RData")
str(ov)
ORCDRC.pnt1 <- data.frame(
  top=unlist(ov[1,grep("depthCodesMeters", names(ov))])*-100, 
  M=unlist(ov[1,grep("ORCDRC.M", names(ov))]), 
  L=unlist(ov[1,grep("ORCDRC.L", names(ov))]), 
  U=unlist(ov[1,grep("ORCDRC.U", names(ov))]))
ORCDRC.pnt1$variable <- "ORCDRC"
## plot the result:
library(lattice)
library(aqp)
data(soil.legends)
## Soil organic carbon:
ORCDRC.range = range(soil.legends[["ORCDRC"]]$MIN, soil.legends[["ORCDRC"]]$MAX)
dev.new(width=5, height=6)
xyplot(top ~ M | variable, data=ORCDRC.pnt1, ylab='Depth in cm',
  xlab='5th and 95th percentiles', xlim=ORCDRC.range,
  lower=ORCDRC.pnt1$L, upper=ORCDRC.pnt1$U, ylim=c(150,0),
  panel=panel.depth_function,
  alpha=0.25, sync.colors=TRUE,
  par.settings=list(superpose.line=list(col='RoyalBlue', lwd=3)),
  strip=strip.custom(bg=grey(0.8))
)
q()
source('C:/Roaming/Tinn-R/tmp/sgInfo.R')
startSocketServer(port=8889)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
gdalinfo(xml.out)
gdalinfo(xml.out)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
gdalinfo(xml.out)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
saveXML(l1, file=xml.out)
gdalinfo(xml.out)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
gdalinfo(xml.out)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
gdalinfo(xml.out)
gdal_translate(src_dataset=xml.out, dst_dataset="ORC_sd1_Ghana.tif", of="GTiff", srcwin=paste(c(o.x, o.y, d.x, d.y), collapse=" "))
GDALinfo("ORC_sd1_Ghana.tif")
library(rgdal)
GDALinfo("ORC_sd1_Ghana.tif")
gdal_translate(src_dataset=xml.out, dst_dataset="ORC_sd1_Ghana.tif", of="GTiff", srcwin=paste(c(o.x, o.y, d.x, d.y), collapse=" "))
gdalinfo(xml.out)
q()
library(GSIF)
library(RCurl)
library(gdalUtils)
getOption("gdalUtils_gdalPath")
fw <- utils::readRegistry("SOFTWARE\\WOW6432Node\\FWTools")$Install_Dir
gdal_setInstallation(search_path=paste(fw, "bin", sep="\\"), rescan=TRUE)
getOption("gdalUtils_gdalPath")
te.as <- c(16.47, 32.82, 0.86, -10.62)
tex.name <- c(paste("CLYPPT_sd", c(1,2,3), "_M", sep=""), paste("SNDPPT_sd", c(1,2,3), "_M", sep=""), paste("SLTPPT_sd", c(1,2,3), "_M", sep=""))
tex.name
te.as <- c(16.47, 32.82, 0.86, -10.62)
wcs
te
te.as <- c(16.47, 0.86, 32.82, -10.62)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
tex.name <- c(paste("CLYPPT_sd", c(1,2,3), "_M", sep=""), paste("SNDPPT_sd", c(1,2,3), "_M", sep=""), paste("SLTPPT_sd", c(1,2,3), "_M", sep=""))
o.x2
o.y2
d.y2
d.x2
ghana@bbox
te
o.x
o.y
d.y
d.x
te.as <- c(16.47, 0.86, 32.82, -10.62)
o.x2 = 43200 + round(43200*(te.as[1]-bb[1,2])/(bb[1,2]-bb[1,1]))
o.y2 = round(21600*(bb[2,2]-te.as[4])/(bb[2,2]-bb[2,1]))
d.y2 = round(21600*(te.as[4]-te.as[2])/(bb[2,2]-bb[2,1]))
d.x2 = round(43200*(te.as[3]-te.as[1])/(bb[1,2]-bb[1,1]))
d.y2
d.x2
te.as <- c(16.47, -10.62, 32.82, 0.86)
o.x2 = 43200 + round(43200*(te.as[1]-bb[1,2])/(bb[1,2]-bb[1,1]))
o.y2 = round(21600*(bb[2,2]-te.as[4])/(bb[2,2]-bb[2,1]))
d.y2 = round(21600*(te.as[4]-te.as[2])/(bb[2,2]-bb[2,1]))
d.x2 = round(43200*(te.as[3]-te.as[1])/(bb[1,2]-bb[1,1]))
d.y2
d.x2
tex.name <- c("CLYPPT_sd1_M", "SNDPPT_sd1_M", "SLTPPT_sd1_M")
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
library(XML)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
congo1km <- stack(paste(tex.name, "_Congo.tif", sep=""))
paste(tex.name, "_Congo.tif", sep="")
library(raster)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
congo1km <- stack(paste(tex.name, "_Congo.tif", sep=""))
congo1km <- as(congo1km, "SpatialGridDataFrame")
library(soiltexture)
?TT.points.in.classes
TT.points.in.classes(tri.data=c(CLAY=20, SILT=40, SAND=40), class.sys="USDA.TT")
TT.points.in.classes(tri.data=data.frame(CLAY=20, SILT=40, SAND=40), class.sys="USDA.TT")
str(TT.points.in.classes(tri.data=data.frame(CLAY=20, SILT=40, SAND=40), class.sys="USDA.TT"))
TT.points.in.classes(tri.data=data.frame(CLAY=20, SILT=40, SAND=40), class.sys="USDA.TT", PiC.type = "t")
spplot(congo1km)
tex.df <- congo1km@data
str(tex.df)
names(tex.df) <- c("CLAY", "SAND", "SILT")
congo1km$TEX_sd3_M <- TT.points.in.classes(tri.data=tex.df, class.sys="USDA.TT", PiC.type = "t")
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
spplot(congo1km)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
TT.points.in.classes(tri.data=data.frame(CLAY=20, SILT=40, SAND=40), class.sys="USDA.TT", PiC.type = "t")
names(congo1km@data) <- c("CLAY", "SAND", "SILT")
congo1km$TEX_sd3_M <- TT.points.in.classes(tri.data=congo1km@data, class.sys="USDA.TT", PiC.type="t", tri.sum.tst=FALSE)
spplot(congo1km["TEX_sd3_M"])
plot(raster(congo1km["TEX_sd3_M"]))
congo1km$TEX_sd3_M <- as.factor(TT.points.in.classes(tri.data=congo1km@data, class.sys="USDA.TT", PiC.type="t", tri.sum.tst=FALSE))
summary(congo1km$TEX_sd3_M)
levels(congo1km$TEX_sd3_M)
congo1km$TEX_sd3_M <- as.factor(TT.points.in.classes(tri.data=congo1km@data, class.sys="USDA.TT", PiC.type="t", text.tol=5))
summary(congo1km$TEX_sd3_M)
congo1km$TEX_sd3_M <- as.factor(TT.points.in.classes(tri.data=congo1km@data, class.sys="USDA.TT", PiC.type="t", tri.sum.tst=FALSE, texture2xy=FALSE))
summary(congo1km$TEX_sd3_M)
TT <- TT.points.in.classes(tri.data=congo1km@data, class.sys="USDA.TT", PiC.type="n", tri.sum.tst=FALSE)
str(TT)
View(TT)
str(TT.points.in.classes(tri.data=congo1km@data, class.sys="USDA.TT", PiC.type="t", tri.sum.tst=FALSE))
TT <- TT.points.in.classes(tri.data=congo1km@data, class.sys="USDA.TT", PiC.type="t", tri.sum.tst=FALSE)
round(runif(3)*3)
round(runif(3)*3)
round(runif(3)*3)
round(runif(3)*3)
round(runif(3)*3)
round(runif()*3)
round(runif()*3)
round(runif(1)*3)
round(runif(1)*3)
round(runif(1)*3)
round(runif(1)*3)
round(runif(1)*3)
round(runif(1)*3)
round(runif(1)*3)
round(runif(1)*3)
round(runif(1)*3)
round(runif(1)*3)
round(runif(1)*3)
round(runif(1)*3)
round(runif(1)*3+1)
round(runif(1)*3+1)
round(runif(1)*3+1)
round(runif(1)*3+1)
round(runif(1)*3+1)
round(runif(1)*3+1)
round(runif(1)*3+1)
round(runif(1)*3+1)
round(runif(1)*3+1)
round(runif(1)*3+1)
upper(runif(1)*3)
?round
floor(runif(1)*3)
floor(runif(1)*3)
floor(runif(1)*3)
floor(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
ceiling(runif(1)*3)
no.TT <- sapply(TT, function(x){length(strsplit(TT, ",")[[1]])})
sapply(TT, function(x){length(strsplit(x, ",")[[1]])})
TT <- TT.points.in.classes(tri.data=congo1km@data, class.sys="USDA.TT", PiC.type="t", tri.sum.tst=FALSE)
length(strsplit(TT[1], ",")[[1]])
length(strsplit(TT[2], ",")[[1]])
length(strsplit(TT[15], ",")[[1]])
length(strsplit(TT[256], ",")[[1]])
length(strsplit(TT[259], ",")[[1]])
View(TT)
length(strsplit(TT[8506], ",")[[1]])
no.TT <- sapply(TT, function(x){length(strsplit(x, ",")[[1]])})
i=8506
strsplit(TT[i], ",")[[1]][ceiling(runif(1)*no.TT[i])]
sel.TT <- no.TT > 1
congo1km$TEX_sd3_M <- TT
sel.TT <- which(no.TT > 1)
str(sel.TT)
i=90
strsplit(TT[i], ",")[[1]][ceiling(runif(1)*no.TT[i])]
no.TT[i]
congo1km$TEX_sd3_M[[i]] <- strsplit(TT[i], ",")[[1]][ceiling(runif(1)*no.TT[i])]
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
trim <- function (x){ gsub("^\\s+|\\s+$", "", x) }
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
congo1km$TEX_sd3_M <- as.factor(congo1km$TEX_sd3_M)
summary(congo1km$TEX_sd3_M)
plot(raster(congo1km["TEX_sd3_M"]))
levels(congo1km$TEX_sd3_M)
summary(congo1km$TEX_sd3_M)
rgb(c(195,161,136)/255)
rgb(195/255,161/255,136/255)
leg.tex <- c(rgb(195/255,161/255,136/255), rgb(228/255,226/255,203/255), rgb(212/255,190/255,161/255), rgb(209/255,203/255,162/255))
?kml_open
?kml
library(plotKML)
?kml_open
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
rm(congo1km)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
leg.tex <- c(rgb(240/255,190/255,153/255), rgb(195/255,161/255,136/255), rgb(202/255,195/255,169/255), rgb(195/255,188/255,160/255), rgb(228/255,226/255,203/255), rgb(212/255,190/255,161/255), rgb(209/255,203/255,162/255))
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
q()
