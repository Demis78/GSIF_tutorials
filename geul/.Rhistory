install.packages("## Not run:")
set.seed(42)
models <- caretList(iris[1:50,1:2], iris[1:50,3], methodList=c('glm', 'lm'))
ens <- caretEnsemble(models)
install.packages("caretEnsemble")
chooseCRANmirror()
install.packages("caretEnsemble")
library("caretEnsemble")
library(plotKML)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
data(eberg)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
ov <- over(eberg_grid, eberg)
str(ov)
ov <- over(eberg, eberg_grid)
str(ov)
names(eberg)
m <- cbind(eberg@data[,"TAXGRSC"], ov)
?caretList
check_caretList_classes(list_of_models)
library(caretEnsemble)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
models <- caretList(x=m[,1:5], y=m[,6], methodList=c('nnet', 'rf', 'svmRadial'))
summary(m$TAXGRSC)
m$TAXGRSC <- as.factor(m$TAXGRSC)
m <- cbind(eberg@data[,"TAXGRSC"], ov)
str(m)
m <- cbind(eberg@data[["TAXGRSC"]], ov)
str(m)
m <- cbind(eberg@data["TAXGRSC"], ov)
str(m)
summary(m$TAXGRSC)
m <- m[complete.cases(m),]
str(m)
m <- cbind(ov, eberg@data["TAXGRSC"])
m <- m[complete.cases(m),]
?grep
i = levels(m$TAXGRSC)[1]
i
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
sel <- grep(pattern=i, m$TAXGRSC)
str(sel)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
warnings()
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
m <- m[complete.cases(m),]
str(m)
m$soiltype <- as.factor(m$soiltype)
models <- caretList(x=m[,1:5], y=m$soiltype, methodList=c('nnet', 'rf', 'svmRadial'))
s <- sample(m$soiltype, 500)
str(s)
?sample
rm(s)
m.s <- sample(m, 500)
s <- sample.int(m, 500)
s <- sample.int(nrow(m), 500)
str(s)
models <- caretList(x=m[s,1:5], y=m$soiltype[s], methodList=c('nnet', 'rf', 'svmRadial'))
ctrl <- trainControl(method="repeatedcv", repeats = 3)
ctrl <- trainControl(method="repeatedcv", repeats = 3)
s <- sample.int(nrow(m), 500)
models <- caretList(x=m[s,1:5], y=m$soiltype[s], methodList=c('nnet', 'rf', 'svmRadial'), trControl=ctrl)
str(models)
ctrl <- trainControl(method="repeatedcv", repeats = 5)
s <- sample.int(nrow(m), 300)
str(m[s,1:5])
s <- sample.int(nrow(m), 500)
ctrl <- trainControl(method="repeatedcv", repeats = 5)
models <- caretList(x=m[s,1:4], y=m$soiltype[s], methodList=c('nnet', 'rf', 'svmRadial'), trControl=ctrl)
models <- caretList(x=m[s,1:4], y=m$soiltype[s], methodList=c('rf', 'svmRadial'), trControl=ctrl)
library(kernlab)
str
str(models)
models <- caretList(x=m[s,1:4], y=m$soiltype[s], methodList=c('rf', 'svmRadial'), trControl=ctrl)
traceback()
models <- caretList(x=m[s,1:4], y=m$soiltype[s], methodList=c('rf', 'nnet'), trControl=ctrl)
?rbind.fill
ens <- caretEnsemble(models)
x <- predict(ens, newdata=m, type="probs", na.action = na.pass)
TAXGRSC.rf <- randomForest(m[,1:4], y=m$soiltype)
names(m)
TAXGRSC.mn <- multinom(soiltype~PRMGEO6+DEMSRT6+TWISRT6+TIRAST6, m)
TAXGRSC.svm <- svm(soiltype~PRMGEO6+DEMSRT6+TWISRT6+TIRAST6, m)
library(e1071)
TAXGRSC.svm <- svm(soiltype~PRMGEO6+DEMSRT6+TWISRT6+TIRAST6, m)
probs1 <- predict(TAXGRSC.mn, eberg_grid@data, type="probs", na.action = na.pass)
probs2 <- predict(TAXGRSC.rf, eberg_grid@data, type="prob", na.action = na.pass)
probs2 <- predict(TAXGRSC.svm, eberg_grid@data, type="prob", na.action = na.pass)
lt <- list(probs1, probs2, probs3)
probs2 <- predict(TAXGRSC.rf, eberg_grid@data, type="prob", na.action = na.pass)
probs3 <- predict(TAXGRSC.svm, eberg_grid@data, type="prob", na.action = na.pass)
lt <- list(probs1, probs2, probs3)
probs <- Reduce("+", lt) / length(lt)
str(probs1)
str(probs2)
str(probs3)
probs3 <- predict(TAXGRSC.svm, eberg_grid@data, type="probs", na.action = na.pass)
str(probs3)
probs3 <- predict(TAXGRSC.svm, eberg_grid@data, probability=TRUE, na.action = na.pass)
TAXGRSC.svm <- svm(soiltype~PRMGEO6+DEMSRT6+TWISRT6+TIRAST6, m, probability = TRUE)
probs3 <- predict(TAXGRSC.svm, eberg_grid@data, probability=TRUE, na.action = na.pass)
str(probs3)
str(probs2)
str(probs1)
probs <- Reduce("+", lt) / length(lt)
lt <- list(probs1, probs2, probs3)
probs <- Reduce("+", lt) / length(lt)
str(probs3)
lt <- list(probs1, probs2, attr(probs3, "probabilities"))
str(lt)
probs <- Reduce("+", lt) / length(lt)
eberg_soiltype = eberg_grid
eberg_soiltype@data <- probs
eberg_soiltype@data <- data.frame(probs)
plot(stack(eberg_soiltype))
plot(raster::stack(eberg_soiltype))
TAXGRSC.svm
TAXGRSC.mn
TAXGRSC.rf
plot(raster::stack(eberg_soiltype))
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,0.6))
eberg_soiltype@data <- data.frame(probs1)
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,0.6))
eberg_soiltype@data <- data.frame(probs2)
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,0.6))
eberg_soiltype@data <- data.frame(attr(probs3, "probabilities"))
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,0.6))
?svm
eberg_soiltype@data <- data.frame(probs)
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,1))
eberg_soiltype@data <- data.frame(probs2)
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,1))
eberg_soiltype@data <- data.frame(probs1)
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,1))
eberg_soiltype@data <- data.frame(attr(probs3, "probabilities"))
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,1))
eberg_soiltype = eberg_grid
eberg_soiltype@data <- data.frame(probs)
str(rowSums(eberg_soiltype@data))
summary(rowSums(eberg_soiltype@data)==1)
ch <- rowSums(eberg_soiltype@data)
summary(ch)
?randomForest
TAXGRSC.svm <- svm(soiltype~PRMGEO6+DEMSRT6+TWISRT6+TIRAST6, m, probability = TRUE, cross=5)
TAXGRSC.svm
str(TAXGRSC.svm)
TAXGRSC.svm$accuracies
TAXGRSC.svm$tot.accuracy
s <- sample.int(nrow(m), 500)
TAXGRSC.rf <- randomForest(x=m[-s,1:4], y=m$soiltype[-s], xtest=m[s,1:4], ytest=m$soiltype[s])
TAXGRSC.rf
str(TAXGRSC.rf)
TAXGRSC.rf$test$confusion
TAXGRSC.rf$test$confusion[,"class.error"]
TAXGRSC.rf$test$confusion[,"class.error"]
str(TAXGRSC.svm)
library(e1071)
set.seed(42)
TAXGRSC.rf$test$confusion[,"class.error"]
2*20*5
?sqrt
(2*20*5)^1/3
(2*20*5)^1/3
(2*20*5)^-1/3
(2*20*5)^1/3
mean(2+20+5)
mean(c(2,20,5))
3/(1/2+1/20+1/5)
?randomForest
str(m)
plot.svm(TAXGRSC.svm)
library(e1071)
plot.svm(TAXGRSC.svm)
plot(TAXGRSC.svm)
?plot.svm
plot(TAXGRSC.svm, data=m)
plot(TAXGRSC.svm, data=m, soiltype~PRMGEO6+DEMSRT6+TWISRT6+TIRAST6)
plot(TAXGRSC.svm, data=m, soiltype~DEMSRT6)
TAXGRSC.svm
plot(TAXGRSC.svm, data=m, soiltype~DEMSRT6)
plot(TAXGRSC.svm, data=m)
library(classyfire)
install.packages("classyfire")
library(classyfire)
ens <- cfBuild(inputData=m[,1:4], inputClass=m$soiltype, bootNum=8, ensNum=8, parallel=TRUE, cpus=8, type="SOCK", probability=TRUE)
?spc
library(GSIF)
?spc
eberg_spc <- spc(eberg_grid, ~ PRMGEO6+DEMSRT6+TWISRT6+TIRAST6)
ov <- over(eberg, cbind(eberg_grid, eberg_spc))
str(eberg_spc)
eberg_grid@data <- cbind(eberg_grid@data, eberg_spc@predicted@data)
ov <- over(eberg, eberg_grid)
m <- cbind(ov, eberg@data["TAXGRSC"])
summary(m$TAXGRSC)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
levels(m$TAXGRSC)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
m$soiltype <- as.factor(m$soiltype)
str(m)
ens <- cfBuild(inputData=m[,paste0("PC", 1:9)], inputClass=m$soiltype, bootNum=8, ensNum=8, parallel=TRUE, cpus=8, type="SOCK", probability=TRUE)
TAXGRSC.svm <- svm(soiltype~PRMGEO6+DEMSRT6+TWISRT6+TIRAST6, m, probability = TRUE, cross=5)
lt <- list(probs1, probs2)
probs <- Reduce("+", lt) / length(lt)
eberg_soiltype = eberg_grid
eberg_soiltype@data <- data.frame(probs)
ch <- rowSums(eberg_soiltype@data)
summary(ch)
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,1))
q()
setwd("D:/")
library(GSIF)
library(plotKML)
library(RCurl)
library(sp)
library(rgdal)
library(randomForest)
nl.rd <- getURL("http://spatialreference.org/ref/sr-org/6781/proj4/")
## Geul data:
geul <- read.table("geul.dat", header = TRUE)
coordinates(geul) <- ~x+y
proj4string(geul) <- CRS(nl.rd)
grd25 <- readGDAL("dem25.txt")
names(grd25) = "dem"
# grd25$river <- factor(readGDAL("river.txt")$band1, labels = "River")
grd25$dis <- readGDAL("riverdist.txt")$band1
## mask out missing pixels:
grd25 <- as(grd25, "SpatialPixelsDataFrame")
proj4string(grd25) <- CRS(nl.rd)
spplot(grd25)
setwd("D:/git/GSIF_tutorials/geul")
## Geul data:
geul <- read.table("geul.dat", header = TRUE)
coordinates(geul) <- ~x+y
proj4string(geul) <- CRS(nl.rd)
grd25 <- readGDAL("dem25.txt")
names(grd25) = "dem"
# grd25$river <- factor(readGDAL("river.txt")$band1, labels = "River")
grd25$dis <- readGDAL("riverdist.txt")$band1
## mask out missing pixels:
grd25 <- as(grd25, "SpatialPixelsDataFrame")
proj4string(grd25) <- CRS(nl.rd)
spplot(grd25)
setwd("D:/tmp")
library(sp)
library(gstat)
library(randomForest)
library(plotKML)
## load input data:
data(eberg)
eberg <- eberg[runif(nrow(eberg))<.1,]
coordinates(eberg) <- ~X+Y
proj4string(eberg) <- CRS("+init=epsg:31467")
data(eberg_grid)
gridded(eberg_grid) <- ~x+y
proj4string(eberg_grid) <- CRS("+init=epsg:31467")
SNDMHT_A <- autopredict(eberg["SNDMHT_A"], eberg_grid, auto.plot=FALSE)
plot(SNDMHT_A)
plotKML(SNDMHT_A)
soiltype <- autopredict(eberg["soiltype"], eberg_grid, auto.plot=FALSE)
library(mda)
install.packages("mda")
library(mda)
soiltype <- autopredict(eberg["soiltype"], eberg_grid, auto.plot=FALSE)
library(GSIF)
library(randomForestSRC)
library(ggRandomForests)
## https://cran.r-project.org/web/packages/ggRandomForests/vignettes/randomForestSRC-Regression.pdf
library(scales)
library(lattice)
library(ggplot2)
## load data:
?afsp
data(afsp)
afsp$horizons$DEPTH <- afsp$horizons$UHDICM + (afsp$horizons$LHDICM - afsp$horizons$UHDICM)/2
db <- afsp$horizons[complete.cases(afsp$horizons[,c("BLD","CRFVOL","CLYPPT","SNDPPT","ORCDRC","DEPTH")]),]
rfsrc_BD <- rfsrc(BLD~CRFVOL+CLYPPT+SNDPPT+ORCDRC+DEPTH, data=db)
rfsrc_BD
plot(rfsrc_BD)
plot.variable(rfsrc_BD)
gg_v <- gg_variable(rfsrc_BD, se=TRUE)
plot(gg_v, panel=TRUE, se=TRUE, alpha=.2)
x <- predict(rfsrc_BD, data.frame(CRFVOL=0, CLYPPT=25, SNDPPT=35, ORCDRC=5, DEPTH=15))
x$predicted
x <- predict(rfsrc_BD, data.frame(CRFVOL=0, CLYPPT=25, SNDPPT=35, ORCDRC=5, DEPTH=15))
x$predicted
x <- predict(rfsrc_BD, data.frame(CRFVOL=0, CLYPPT=25, SNDPPT=35, ORCDRC=0, DEPTH=15))
x$predicted
rfsrc_BD
0.05*1.96
library(GSIF)
library(plotKML)
library(raster)
library(randomForestSRC)
library(ggRandomForests)
library(plyr)
?eberg
?fit.gstatModel
## Load points and rasters:
data(eberg)
data(eberg_grid)
coordinates(eberg) <- ~X+Y
proj4string(eberg) <- CRS("+init=epsg:31467")
gridded(eberg_grid) <- ~x+y
proj4string(eberg_grid) <- CRS("+init=epsg:31467")
eberg_spc <- spc(eberg_grid, ~ PRMGEO6+DEMSRT6+TWISRT6+TIRAST6)
eberg_grid@data <- cbind(eberg_grid@data, eberg_spc@predicted@data)
## overlay and create a regression-matrix:
ov <- over(eberg, eberg_grid)
m <- cbind(ov, eberg@data)
m.SND.2D <- rfsrc(SNDMHT_A~PC1+PC2+PC3+PC4+PC5+PC6+PC7+PC8+PC9+PC10, data=m)
m.SND.2D
plot(m.SND.2D)
plot(raster(eberg_grid["PC4"]))
plot(raster(eberg_grid["PC4"]))
plot(raster(eberg_grid["PC4"]))
plotKML(raster(eberg_grid["PC4"]))
m.SND.2DB <- rfsrc(SNDMHT_B~PC1+PC2+PC3+PC4+PC5+PC6+PC7+PC8+PC9+PC10, data=m)
SND <- getHorizons(m, idcol="ID", sel=c("UHDICM", "LHDICM", "SNDMHT"))
SND$DEPTH <- SND$UHDICM + (SND$LHDICM - SND$UHDICM)/2
SND.df <- join(SND, m[,c("ID",paste0("PC", 1:10))], type="left")
str(SND.df)
sel <- sample.int(nrow(SND.df), 3000)
m.SND.3D <- rfsrc(SNDMHT~DEPTH+PC1+PC2+PC3+PC4+PC5+PC6+PC7+PC8+PC9+PC10, data=SND.df[sel,], na.action="na.omit")
m.SND.3D
plot(m.SND.3D)
out <- list(NULL)
LETTERS[1:5]
let <- LETTERS[1:5]
i=1
fm = as.formula(paste("SNDMHT_", let[i], "~PC1+PC2+PC3+PC4+PC5+PC6+PC7+PC8+PC9+PC10"))
fm = as.formula(paste0("SNDMHT_", let[i], "~PC1+PC2+PC3+PC4+PC5+PC6+PC7+PC8+PC9+PC10"))
fm
str(m.SND.2D)
setwd("D:/git/GSIF_tutorials/geul")
library(GSIF)
library(plotKML)
library(RCurl)
library(sp)
library(rgdal)
library(randomForest)
nl.rd <- getURL("http://spatialreference.org/ref/sr-org/6781/proj4/")
## Geul data:
geul <- read.table("geul.dat", header = TRUE)
coordinates(geul) <- ~x+y
proj4string(geul) <- CRS(nl.rd)
grd25 <- readGDAL("dem25.txt")
names(grd25) = "dem"
# grd25$river <- factor(readGDAL("river.txt")$band1, labels = "River")
grd25$dis <- readGDAL("riverdist.txt")$band1
## mask out missing pixels:
grd25 <- as(grd25, "SpatialPixelsDataFrame")
proj4string(grd25) <- CRS(nl.rd)
spplot(grd25)
## fit a model:
grd25.spc <- spc(grd25, ~ dem+dis)
m = log1p(pb) ~ PC1+PC2
#pbm <- fit.gstatModel(m, observations=geul, grd25.spc@predicted, family=gaussian(link=log))
pbm <- fit.gstatModel(m, observations=geul, grd25.spc@predicted)
plot(pbm)
pb.rk0 <- predict(pbm, grd25.spc@predicted)
pb.rk <- autopredict(geul["pb"], grd25)
?autopredict
