library(soiltexture)
TT.plot(class.sys = "USDA.TT")
TT.classes.tbl(class.sys="USDA.TT", collapse=", ")
?TT.classes.tbl
vert <- TT.vertices.tbl(class.sys = "USDA.TT")
vert$x <- 1-vert$SAND+(vert$SAND-(1-vert$SILT))*0.5
vert$y <- vert$CLAY*sin(pi/3)
USDA.TT <- data.frame(TT.classes.tbl(class.sys = "USDA.TT", collapse = ", "))
TT.pnt <- as.list(rep(NA, length(USDA.TT$name)))
poly.lst <- as.list(rep(NA, length(USDA.TT$name)))
for(i in 1:length(USDA.TT$name)){ 
  ## strip the vertices numbers:
  TT.pnt[[i]] <- as.integer(strsplit(unclass(paste(USDA.TT[i, "points"])), ", ")[[1]])
  ## create a list of polygons:
  poly.lst[[i]] <- vert[TT.pnt[[i]],c("x","y")]
  ## add extra point:
  poly.lst[[i]] <- Polygons(list(Polygon(rbind(poly.lst[[i]], poly.lst[[i]][1,]))), ID=i)
}
## convert texture triangle to a spatial object:
poly.sp <- SpatialPolygons(poly.lst, proj4string=CRS(as.character(NA)))
poly.USDA.TT <- SpatialPolygonsDataFrame(poly.sp, data.frame(ID=USDA.TT$name), match.ID=FALSE)
slot(slot(poly.USDA.TT, "polygons")[[1]], "labpt")
get.TF.from.XY <- function(object, xcoord, ycoord) {
    object$CLAY <- object[,ycoord]/sin(pi/3)
    object$SAND <- (2 - object$CLAY - 2 * object[,xcoord]) * 0.5
    object$SILT <- 1 - (object$SAND + objectname$CLAY)
    return(object)
}
USDA.TT.cnt <- data.frame(t(sapply(slot(poly.USDA.TT, "polygons"), slot, "labpt")))
USDA.TT.cnt$name <- poly.USDA.TT$ID
USDA.TT.cnt <- get.TF.from.XY(USDA.TT.cnt, "X1", "X2")
USDA.TT.cnt[,c("SAND","SILT","CLAY")] <- signif(USDA.TT.cnt[,c("SAND","SILT","CLAY")], 2)
USDA.TT.cnt[,c("name","SAND","SILT","CLAY")]
get.TF.from.XY <- function(object, xcoord, ycoord) {
    object$CLAY <- object[,ycoord]/sin(pi/3)
    object$SAND <- (2 - object$CLAY - 2 * object[,xcoord]) * 0.5
    object$SILT <- 1 - (object$SAND + object$CLAY)
    return(object)
}
get.TF.from.XY <- function(df, xcoord, ycoord) {
    df$CLAY <- df[,ycoord]/sin(pi/3)
    df$SAND <- (2 - df$CLAY - 2 * df[,xcoord]) * 0.5
    df$SILT <- 1 - (df$SAND + df$CLAY)
    return(df)
}
USDA.TT.cnt <- data.frame(t(sapply(slot(poly.USDA.TT, "polygons"), slot, "labpt")))
USDA.TT.cnt$name <- poly.USDA.TT$ID
USDA.TT.cnt <- get.TF.from.XY(USDA.TT.cnt, "X1", "X2")
USDA.TT.cnt[,c("SAND","SILT","CLAY")] <- signif(USDA.TT.cnt[,c("SAND","SILT","CLAY")], 2)
USDA.TT.cnt[,c("name","SAND","SILT","CLAY")]
## estimate uncertainty for some class using simulations:
sim.SCl <- data.frame(spsample(poly.USDA.TT[poly.USDA.TT$ID=="clay",], type="random", n=100))
sim.SCl <- get.TF.from.XY(sim.SCl, "x", "y")
## average error:
sd(sim.SCl$SAND); sd(sim.SCl$SILT); sd(sim.SCl$CLAY)
data(afsp)
library(GSIF)
?
TT.plot
names(afsp$horizons)
data(afsp)
names(afsp$horizons)
TT.plot(class.sys = "USDA.TT", tri.data = afsp$horizons, css.names = c("SNDPPT", "SLTPPT", "CLYPPT"))
tdf = afsp$horizons[,c("SNDPPT", "SLTPPT", "CLYPPT")]
summary(!is.na(tdf$SNDPPT)&!is.na(tdf$SLTPPT)&!is.na(tdf$SLTPPT))
tdf <- afsp$horizons[,c("SNDPPT", "SLTPPT", "SLTPPT")]
tdf <- tdf[!is.na(tdf$SNDPPT)&!is.na(tdf$SLTPPT)&!is.na(tdf$SLTPPT),] 
TT.plot(class.sys = "USDA.TT", tri.data = tdf)
names(afsp$horizons)
tdf <- afsp$horizons[,c("SNDPPT", "SLTPPT", "CLYPPT")]
tdf <- tdf[!is.na(tdf$SNDPPT)&!is.na(tdf$SLTPPT)&!is.na(tdf$CLYPPT),] 
TT.plot(class.sys = "USDA.TT", tri.data = tdf)
tdf <- afsp$horizons[,c("CLYPPT", "SLTPPT", "SNDPPT")]
?TT.plot
TT.plot(class.sys = "USDA.TT", tri.data = tdf, css.names = c("CLYPPT", "SLTPPT", "SNDPPT"))
tdf <- afsp$horizons[,c("CLYPPT", "SLTPPT", "SNDPPT")]
tdf <- tdf[!is.na(tdf$SNDPPT)&!is.na(tdf$SLTPPT)&!is.na(tdf$CLYPPT),] 
TT.plot(class.sys = "USDA.TT", tri.data = tdf, css.names = c("CLYPPT", "SLTPPT", "SNDPPT"))
?rowSums
tdf$Sum = rowSums(tdf)
for(i in c("CLYPPT", "SLTPPT", "SNDPPT")) { tdf[,i] <- tdf[,i]/tdf$Sum }
TT.plot(class.sys = "USDA.TT", tri.data = tdf, css.names = c("CLYPPT", "SLTPPT", "SNDPPT"))
tdf <- afsp$horizons[,c("CLYPPT", "SLTPPT", "SNDPPT")]
tdf <- tdf[!is.na(tdf$SNDPPT)&!is.na(tdf$SLTPPT)&!is.na(tdf$CLYPPT),] 
## the sum has to 100%:
tdf$Sum = rowSums(tdf)
for(i in c("CLYPPT", "SLTPPT", "SNDPPT")) { tdf[,i] <- tdf[,i]/tdf$Sum * 100 }
TT.plot(class.sys = "USDA.TT", tri.data = tdf, css.names = c("CLYPPT", "SLTPPT", "SNDPPT"))
geo <- TT.geo.get()
names(tdf)[1:3] <- c("CLAY", "SILT", "SAND")
iwd.res <- TT.iwd(geo = geo, tri.data = tdf)
tdf <- tdf[runif(nrow(tdf))<.1,]
iwd.res <- TT.iwd(geo = geo, tri.data = tdf)
tdf <- tdf[runif(nrow(tdf))<.02,]
tdf <- afsp$horizons[,c("CLYPPT", "SLTPPT", "SNDPPT")]
tdf <- tdf[!is.na(tdf$SNDPPT)&!is.na(tdf$SLTPPT)&!is.na(tdf$CLYPPT),] 
## subset to 2%:
tdf <- tdf[runif(nrow(tdf))<.02,]
## the sum has to 100%:
tdf$Sum = rowSums(tdf)
for(i in c("CLYPPT", "SLTPPT", "SNDPPT")) { tdf[,i] <- tdf[,i]/tdf$Sum * 100 }
View(tdf)
iwd.res <- TT.iwd(geo = geo, tri.data = tdf)
names(tdf)[1:3] <- c("CLAY", "SILT", "SAND")
geo <- TT.geo.get()
iwd.res <- TT.iwd(geo = geo, tri.data = tdf)
iwd.res <- TT.iwd(geo = geo, tri.data = tdf, z.name = "Sum")
TT.image(x = iwd.res, geo = geo, main = "Density of observations")
TT.plot(class.sys = "USDA.TT", add = TRUE)
TT.image(x = iwd.res, geo = geo, main = "Density of observations")
TT.plot(class.sys = "USDA.TT", add = TRUE)
TT.image(x = iwd.res, geo = geo, main = "Density of observations")
TT.plot(geo = geo, grid.show = FALSE, add = TRUE)
?TT.image
TT.image(x = iwd.res, geo = geo, main = "Density of observations", col=SAGA_pal[[1]])
TT.image(x = iwd.res, geo = geo, main = "Density of observations", col=heat.colors(20))
TT.plot(geo = geo, class.sys = "USDA.TT", grid.show = FALSE, add = TRUE)
library(plotKML)
data(SAGA_pal)
TT.image(x = iwd.res, geo = geo, main = "Density of observations", col=SAGA_pal[[1]])
TT.plot(geo = geo, class.sys = "USDA.TT", grid.show = FALSE, add = TRUE)
TT.image(x = iwd.res, geo = geo, main = "Density of observations", col=rev(SAGA_pal[[1]]))
TT.plot(geo = geo, class.sys = "USDA.TT", grid.show = FALSE, add = TRUE)
View(tdf)
str(iwd.res)
TT.plot(class.sys = "USDA.TT", tri.data = tdf, grid.show = FALSE, pch="+", cex=.4)
tdf <- afsp$horizons[,c("CLYPPT", "SLTPPT", "SNDPPT")]
tdf <- tdf[!is.na(tdf$SNDPPT)&!is.na(tdf$SLTPPT)&!is.na(tdf$CLYPPT),] 
## subset to 5%:
tdf <- tdf[runif(nrow(tdf))<.05,]
## the sum has to 100%:
tdf$Sum = rowSums(tdf)
for(i in c("CLYPPT", "SLTPPT", "SNDPPT")) { tdf[,i] <- tdf[,i]/tdf$Sum * 100 }
names(tdf)[1:3] <- c("CLAY", "SILT", "SAND")
TT.plot(class.sys = "USDA.TT", tri.data = tdf, grid.show = FALSE, pch="+", cex=.4)
tdf <- afsp$horizons[,c("CLYPPT", "SLTPPT", "SNDPPT")]
tdf <- tdf[!is.na(tdf$SNDPPT)&!is.na(tdf$SLTPPT)&!is.na(tdf$CLYPPT),] 
## subset to 15%:
tdf <- tdf[runif(nrow(tdf))<.15,]
## the sum has to 100%:
tdf$Sum = rowSums(tdf)
for(i in c("CLYPPT", "SLTPPT", "SNDPPT")) { tdf[,i] <- tdf[,i]/tdf$Sum * 100 }
names(tdf)[1:3] <- c("CLAY", "SILT", "SAND")
TT.plot(class.sys = "USDA.TT", tri.data = tdf, grid.show = FALSE, pch="+", cex=.4)
TT.plot(class.sys = "USDA.TT", tri.data = tdf, grid.show = FALSE, pch="+", cex=.4, col="red")
require(GSIF)
data(afsp)
tdf <- afsp$horizons[,c("CLYPPT", "SLTPPT", "SNDPPT")]
tdf <- tdf[!is.na(tdf$SNDPPT)&!is.na(tdf$SLTPPT)&!is.na(tdf$CLYPPT),] 
## subset to 15%:
tdf <- tdf[runif(nrow(tdf))<.15,]
## the sum has to 100%:
tdf$Sum = rowSums(tdf)
for(i in c("CLYPPT", "SLTPPT", "SNDPPT")) { tdf[,i] <- tdf[,i]/tdf$Sum * 100 }
names(tdf)[1:3] <- c("CLAY", "SILT", "SAND")
TT.plot(class.sys = "USDA.TT", tri.data = tdf, grid.show = FALSE, pch="+", cex=.4, col="red")
??rpoint
?afsp
data(afsp)
names(afsp$horizons)
afsp$horizons[1:5,"MCOMNS"]
paste(afsp$horizons[1:5,"MCOMNS"])
paste(afsp$horizons[1:10,"MCOMNS"])
library(aqp)
library(colorspace)
?aqp::munsell2rgb
load(file("http://gsif.isric.org/lib/exe/fetch.php?media=munsell_rgb.rdata"))
library(colorspace)
munsell.rgb[round(runif(1)*2350, 0),]
library(colorspace)
as(RGB(R=munsell.rgb[1007,"R"]/255, G=munsell.rgb[1007,"G"]/255, B=munsell.rgb[1007,"B"]/255), "HSV")
aqp::munsell2rgb(the_hue = "10B", the_value = 2, the_chroma = 12)
col2kml("#003A7CFF")
hex2kml("#003A7CFF")
hex2rgb("#003A7CFF")
?rgb
col2rgb("#003A7CFF")
data(afsp)
paste(afsp$horizons[1:10,"MCOMNS"])
mcol <- join(afsp$horizons[,c("SOURCEID","MCOMNS","UHDICM","LHDICM")], afsp$sites[,c("SOURCEID","LONWGS84","LATWGS84")], type='inner') 
library(pylr)
library(plyr)
mcol <- join(afsp$horizons[,c("SOURCEID","MCOMNS","UHDICM","LHDICM")], afsp$sites[,c("SOURCEID","LONWGS84","LATWGS84")], type='inner') 
str(mcol)
mcol$Munsell <- sub(" ", "", sub("/", "_", mcol$MCOMNS))
hue.lst <- expand.grid(c("2.5", "5", "7.5", "10"), c("YR","GY","BG","YE","YN","YY","R","Y","B","G"))
hue.lst$mhue <- paste(hue.lst$Var1, hue.lst$Var2, sep="") 
hue.lst
str(mcol)
View(mcol)
for(j in hue.lst$mhue[1:28]){ 
  mcol$Munsell <- sub(j, paste(j, "_", sep=""), mcol$Munsell, fixed=TRUE) 
}
mcol$depth <- mcol$UHDICM + (mcol$LHDICM-mcol$UHDICM)/2 
mcolor.RGB <- merge(mcol, munsell.rgb, by="Munsell")
str(mcolor.RGB)
mcolor.RGB$Rc <- round(mcolor.RGB$R/255*100, 0)
mcolor.RGB$Gc <- round(mcolor.RGB$G/255*100, 0)
mcolor.RGB$Bc <- round(mcolor.RGB$B/255*100, 0)
rm(mcolor.RGB)
mcol.RGB <- merge(mcol, munsell.rgb, by="Munsell")
mcol.RGB$Rc <- round(mcol.RGB$R/255*100, 0)
mcol.RGB$Gc <- round(mcol.RGB$G/255*100, 0)
mcol.RGB$Bc <- round(mcol.RGB$B/255*100, 0)
mcol.RGB$col <- rgb(mcol.RGB$Rc, mcol.RGB$Gc, mcol.RGB$Bc)
rgb(1,0,0)
mcol.RGB$Rc <- round(mcol.RGB$R/255, 3)
mcol.RGB$Gc <- round(mcol.RGB$G/255, 3)
mcol.RGB$Bc <- round(mcol.RGB$B/255, 3)
mcol.RGB$col <- rgb(mcol.RGB$Rc, mcol.RGB$Gc, mcol.RGB$Bc)
summary(mcol.RGB$depth)
mcol.RGB <- mcol.RGB[mcol.RGB$depth>0 & mcol.RGB$depth<30 & !is.na(mcol.RGB$col),]
View(mcol.RGB)
mcol.RGB <- merge(mcol, munsell.rgb, by="Munsell")
mcol.RGB <- mcol.RGB[!is.na(mcol.RGB$R),]
emcol.RGB$Rc <- round(mcol.RGB$R/255, 3)
mcol.RGB <- merge(mcol, munsell.rgb, by="Munsell")
mcol.RGB <- mcol.RGB[!is.na(mcol.RGB$R),]
mcol.RGB$Rc <- round(mcol.RGB$R/255, 3)
mcol.RGB$Gc <- round(mcol.RGB$G/255, 3)
mcol.RGB$Bc <- round(mcol.RGB$B/255, 3)
mcol.RGB$col <- rgb(mcol.RGB$Rc, mcol.RGB$Gc, mcol.RGB$Bc)
mcol.RGB <- mcol.RGB[mcol.RGB$depth>0 & mcol.RGB$depth<30 & !is.na(mcol.RGB$col),]
coordinates(mcol.RGB) <- ~ LONWGS84+LATWGS84
load(file("http://gsif.isric.org/lib/exe/fetch.php?media=admin.af.rda"))
download.file("http://gsif.isric.org/lib/exe/fetch.php?media=admin.af.rda", "admin.af.rda")
load("admin.af.rda")
proj4string(admin.af) <- "+proj=latlong +datum=WGS84"
country <- as(admin.af, "SpatialLines")
plot(country, col="darkgrey", xlim=xlim, ylim=ylim, asp=1)
plot(country, col="darkgrey", asp=1)
points(mcol.RGB, pch=21, bg=mcol.RGB$col, cex=.6, col="black")
points(mcol.RGB, pch=21, bg=mcol.RGB$col, col="black")
mcol.RGB <- merge(mcol, munsell.rgb, by="Munsell")
View(mcol.RGB)
mcol.RGB <- merge(mcol, munsell.rgb, by="Munsell", all.x=FALSE)
View(mcol.RGB)
mcol <- mcol[!is.na(mcol$MCOMNS),]
str(mcol)
mcol <- join(afsp$horizons[,c("SOURCEID","MCOMNS","UHDICM","LHDICM")], afsp$sites[,c("SOURCEID","LONWGS84","LATWGS84")], type='inner') 
mcol <- mcol[!is.na(mcol$MCOMNS),]
str(mcol)
mcol$Munsell <- sub(" ", "", sub("/", "_", mcol$MCOMNS))
hue.lst <- expand.grid(c("2.5", "5", "7.5", "10"), c("YR","GY","BG","YE","YN","YY","R","Y","B","G"))
hue.lst$mhue <- paste(hue.lst$Var1, hue.lst$Var2, sep="") 
for(j in hue.lst$mhue[1:28]){ 
  mcol$Munsell <- sub(j, paste(j, "_", sep=""), mcol$Munsell, fixed=TRUE) 
}
mcol$depth <- mcol$UHDICM + (mcol$LHDICM-mcol$UHDICM)/2 
mcol.RGB <- merge(mcol, munsell.rgb, by="Munsell")
str(mcol.RGB)
mcol.RGB <- mcol.RGB[!is.na(mcol.RGB$R),]
mcol.RGB$Rc <- round(mcol.RGB$R/255, 3)
mcol.RGB$Gc <- round(mcol.RGB$G/255, 3)
mcol.RGB$Bc <- round(mcol.RGB$B/255, 3)
mcol.RGB$col <- rgb(mcol.RGB$Rc, mcol.RGB$Gc, mcol.RGB$Bc)
mcol.RGB <- mcol.RGB[mcol.RGB$depth>0 & mcol.RGB$depth<30 & !is.na(mcol.RGB$col),]
coordinates(mcol.RGB) <- ~ LONWGS84+LATWGS84
download.file("http://gsif.isric.org/lib/exe/fetch.php?media=admin.af.rda", "admin.af.rda")
load("admin.af.rda")
proj4string(admin.af) <- "+proj=latlong +datum=WGS84"
country <- as(admin.af, "SpatialLines")
par(mar=c(.0,.0,.0,.0))
plot(country, col="darkgrey", asp=1)
points(mcol.RGB, pch=21, bg=mcol.RGB$col, col="black")
plot(country, col="darkgrey", asp=1)
par(mar=c(.0,.0,.0,.0))
plot(country, col="darkgrey", asp=1)
points(mcol.RGB, pch=21, bg=mcol.RGB$col, col="black")
lon = 3.90; lat = 7.50; id = "ISRIC:NG0017"; FAO1988 = "LXp" 
top = c(0, 18, 36, 65, 87, 127) 
bottom = c(18, 36, 65, 87, 127, 181)
ORCDRC = c(18.4, 4.4, 3.6, 3.6, 3.2, 1.2)
hue = c("7.5YR", "7.5YR", "2.5YR", "5YR", "5YR", "10YR")
value = c(3, 4, 5, 5, 5, 7); chroma = c(2, 4, 6, 8, 4, 3)
# prepare a SoilProfileCollection:
prof1 <- join(data.frame(id, top, bottom, ORCDRC, hue, value, chroma), 
   data.frame(id, lon, lat, FAO1988), type='inner')
prof1$soil_color <- with(prof1, munsell2rgb(hue, value, chroma))
depths(prof1) <- id ~ top + bottom
site(prof1) <- ~ lon + lat + FAO1988 
coordinates(prof1) <- ~ lon + lat
proj4string(prof1) <- CRS("+proj=longlat +datum=WGS84")
prof1
plotKML(prof1, var.name="ORCDRC", color.name="soil_color")
q()
