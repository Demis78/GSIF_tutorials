source(.trPaths[5], echo=TRUE, max.deparse.length=150)
length(sd.ll)
j
j=1
str(slot(SNDMHT.gsm, paste("sd", j, sep="")))
s
  kml(slot(SNDMHT.gsm, paste("sd", j, sep="")), folder.name=paste("eberg_sd", j, sep=""), file=paste("SNDMHT_sd", j, ".kml", sep=""), colour=observedValue, zlim=c(10,85), raster_name=paste("SNDMHT_sd", j, ".png", sep=""), altitude=z0+5000+(s[j]*2500))
traceback()
  tmp <- slot(SNDMHT.gsm, paste("sd", j, sep=""))
  kml(tmp, folder.name=paste("eberg_sd", j, sep=""), file=paste("SNDMHT_sd", j, ".kml", sep=""), colour=observedValue, zlim=c(10,85), raster_name=paste("SNDMHT_sd", j, ".png", sep=""), altitude=z0+5000+(s[j]*2500))
rm(tmp)
paste("eberg_sd", j, sep="")
z0+5000+(s[j]*2500)
source(.trPaths[4])
  kml(tmp, folder.name=paste("eberg_sd", j, sep=""), file=paste("SNDMHT_sd", j, ".kml", sep=""), colour=observedValue, zlim=c(10,85), raster_name=paste("SNDMHT_sd", j, ".png", sep=""), altitude=z0+5000+(s[j]*2500))
  kml(slot(SNDMHT.gsm, paste("sd", j, sep="")), folder.name=paste("eberg_sd", j, sep=""), file=paste("SNDMHT_sd", j, ".kml", sep=""), colour=observedValue, zlim=c(10,85), raster_name=paste("SNDMHT_sd", j, ".png", sep=""), altitude=z0+5000+(s[j]*2500))
source(.trPaths[4])
  kml(slot(SNDMHT.gsm, paste("sd", j, sep="")), folder.name=paste("eberg_sd", j, sep=""), file=paste("SNDMHT_sd", j, ".kml", sep=""), colour=observedValue, zlim=c(10,85), raster_name=paste("SNDMHT_sd", j, ".png", sep=""), altitude=z0+5000+(s[j]*2500))
source(.trPaths[4])
  kml(slot(SNDMHT.gsm, paste("sd", j, sep="")), folder.name=paste("eberg_sd", j, sep=""), file=paste("SNDMHT_sd", j, ".kml", sep=""), colour=observedValue, zlim=c(10,85), raster_name=paste("SNDMHT_sd", j, ".png", sep=""), altitude=z0+5000+(s[j]*2500))
source(.trPaths[4])
  kml(slot(SNDMHT.gsm, paste("sd", j, sep="")), folder.name=paste("eberg_sd", j, sep=""), file=paste("SNDMHT_sd", j, ".kml", sep=""), colour=observedValue, zlim=c(10,85), raster_name=paste("SNDMHT_sd", j, ".png", sep=""), altitude=z0+5000+(s[j]*2500))
kml(SNDMHT.geo, shape=shape, colour=observedValue, zlim=c(10,85), file.name="SNDMHT_eberg.kml", altitude=z0+5000+(SNDMHT.geo@coords[,3]*2500), balloon=FALSE, labels="", extrude=FALSE, altitudeMode="relativeToGround", size=.3)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
eberg_sm <- spmultinom(formulaString, eberg.xy, eberg_spc@predicted)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
eberg_sm <- spmultinom(formulaString, eberg.xy, eberg_spc@predicted)
?setClass
?Classes
remove("SpatialMemberships")
remove(SpatialMemberships)
SpatialMemberships
removeClass("SpatialMemberships")
removeClass("SpatialMemberships")
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
eberg_sm <- spmultinom(formulaString, eberg.xy, eberg_spc@predicted)
eberg_sm@class.c
pal = seq(0, 1, 1/50)
spplot(eberg_sm@mu, at=pal, col.regions=rev(grey(pal)))
eberg_sm <- spfkm(formulaString, eberg.xy, eberg_spc@predicted)
library(rgdal)
library(plotKML)
library(GSIF)
library(raster)
library(plyr)
library(aqp)
s
p = get("cellsize", envir = GSIF.opts)[2]
s = get("stdepths", envir = GSIF.opts)
s
sd.ll <- sapply(1:length(sd.l), FUN=function(x){make.3Dgrid(sd.l[[x]]@predicted[3:4], pixelsize=p, stdepths=s[x], tmp.file = FALSE)}) ## TH: takes some 2-3 minutes!
URI = "http://wps.worldgrids.org/pywps.cgi"
server <- list(URI=URI, request="execute", 
    version="version=1.0.0", service.name="service=wps", 
    identifier="identifier=sampler_local1pt_nogml")
glcesa3.wps <- new("WPS", server=server, inRastername="glcesa3")
# show(biocl15.wps)
prl <- getProcess(glcesa3.wps)
prl[7]
describe(glcesa3.wps, identifier="overlay")
p1 <- data.frame(lon=10, lat=10)
coordinates(p1) <- ~lon+lat
proj4string(p1) <- CRS("+proj=longlat +datum=WGS84")
p1
over(glcesa3.wps, p1)
glcesa3 <- subset(glcesa3.wps, bbox=matrix(c(-20,30,40,60), nrow=2))
?flipVertical
glcesa3.wps <- new("WPS", server=server, inRastername="GLCESA3a")
prl <- getProcess(glcesa3.wps)
prl[7]
describe(glcesa3.wps, identifier="overlay")
p1 <- data.frame(lon=10, lat=10)
coordinates(p1) <- ~lon+lat
proj4string(p1) <- CRS("+proj=longlat +datum=WGS84")
p1
over(glcesa3.wps, p1)
glcesa3 <- subset(glcesa3.wps, bbox=matrix(c(-20,30,40,60), nrow=2))
library(XML)
glcesa3 <- subset(glcesa3.wps, bbox=matrix(c(-20,30,40,60), nrow=2))
glcesa3 <- subset(glcesa3.wps, bbox=matrix(c(-20,23,40,42), nrow=2))
image(glcesa3)
glcesa3 <- subset(glcesa3.wps, bbox=matrix(c(20,40,22,42), nrow=2))
x = glcesa3.wps
y = p1
i=1
    ret <- paste("[x=", y@coords[i,1], ";y=", y@coords[i,2], ";inRastername=", x@inRastername,"]", sep="")
ret
    uri = paste(paste(x@server$URI, "?", sep=""), paste(x@server$service, x@server$version, "request=execute", "identifier=sampler_local1pt_nogml", paste("datainputs=", ret, sep=""), sep="&"), sep="")
uri
image(glcesa3)
save.image("D:\\GSIF\\code\\trunk\\eberg\\.RData")
SNDMHT.gsm <- GlobalSoilMap(sd.ll, varname="SNDMHT", period=c("1999-02-01", "2001-07-01"))
save(SNDMHT.gsm, file="SNDMHT.rda", compress="xz") 
str(SNDMHT.gsm, max.level=2)
str(SNDMHT.gsm@sd1, max.level=2)
z0 = mean(eberg_grid$DEMSRT6, na.rm=TRUE)
SNDMHT.geo <- subset(eberg.geo, method="SNDMHT")
SNDMHT.geo <- SNDMHT.geo[SNDMHT.geo$latitude>51.57&SNDMHT.geo$latitude<51.59,]
SNDMHT.geo$observedValue <- as.numeric(SNDMHT.geo$observedValue)
coordinates(SNDMHT.geo) <- ~ longitude + latitude + altitude
proj4string(SNDMHT.geo) <- CRS("+proj=longlat +datum=WGS84")
shape = "http://maps.google.com/mapfiles/kml/pal2/icon18.png"
kml(SNDMHT.geo, shape=shape, colour=observedValue, z.lim=c(10,85), file.name="SNDMHT_eberg.kml", altitude=z0+5000+(SNDMHT.geo@coords[,3]*2500), balloon=FALSE, labels="", extrude=FALSE, altitudeMode="relativeToGround", size=.3)
loc <- eberg_spc@predicted[1200:1201,]
new3D.loc <- sp3D(loc)
str(new3D.loc[[1]])
sd.loc <- predict(SNDMHT.m, predictionLocations=new3D.loc[[1]], nfold=0)
library(splines)
sd.loc <- predict(SNDMHT.m, predictionLocations=new3D.loc[[1]], nfold=0)
int95 <- sd.loc@predicted$var1.pred[1] + c(-1.645, 1.645)*sqrt(sd.loc@predicted$var1.var[1])
rm(int95)
int90 <- sd.loc@predicted$var1.pred[1] + c(-1.645, 1.645)*sqrt(sd.loc@predicted$var1.var[1])
invlogit(int90)
new3D.loc[[1]]@coords[1,]
SNDMHT.xy <- spTransform(SNDMHT.geo, CRS("+init=epsg:31467"))
sel.stripe <- eberg_spc@predicted@coords[,2] > min(SNDMHT.xy@coords[,2])  # 2400 locations
loc <- eberg_spc@predicted[sel.stripe,]
new3D.loc <- sp3D(loc)
sd.loc <- predict(SNDMHT.m, predictionLocations=new3D.loc[[1]], nsim=10, block=c(0,0,0))
sd.loc@realizations <- calc(sd.loc@realizations, fun=invlogit)
str(sd.loc, max.level=2)
plotKML(sd.loc, file.name="SNDMHT_sims.kml", z.lim=c(10,85))
formulaString = soiltype ~ PC1+PC2+PC3+PC4+PC5+PC6+PC7+PC8+PC9+PC10
eberg_sm <- spmultinom(formulaString, eberg.xy, eberg_spc@predicted)
eberg_sm@class.c
pal = seq(0, 1, 1/50)
spplot(eberg_sm@mu, at=pal, col.regions=rev(grey(pal)))
Ls = length(levels(eberg_sm@predicted$soiltype))
pnts = list("sp.points", eberg.xy, pch="+", cex=.6, col="black")
spplot(eberg_sm@predicted, col.regions=rainbow(Ls)[rank(runif(Ls))], sp.layout=pnts)
eberg_sm <- spfkm(formulaString, eberg.xy, eberg_spc@predicted)
glm.formulaString2 = as.formula(paste("SNDMHT_A ~ ", paste(names(eberg_sm@mu), collapse="+"), "-1"))
glm.formulaString2
SNDMHT.m2 <- fit.gstatModel(observations=eberg.xy, glm.formulaString2, covariates=eberg_sm@mu)
str(eberg.xy)
observations=eberg.xy
covariates=eberg_sm@mu
  ov <- over(observations, covariates)
str(ov)
View(ov)
x <- over(covariates, observations)
str(x)
  tv = all.vars(formulaString)[1]
str(data.frame(observations[,tv]))
attr(covariates@bbox, "dimnames")[[1]]
str(observations@coords)
attr(observations@coords, "dimnames")
attr(observations@coords, "dimnames")[[2]]
  attr(observations@coords, "dimnames")[[2]] <- attr(covariates@bbox, "dimnames")[[1]]
  ov <- over(observations, covariates)
  tv = all.vars(formulaString)[1]
  seln = names(covariates) %in% all.vars(formulaString)[-1]
  ov <- cbind(data.frame(observations[,tv]), ov)  
str(ov)
str(observations@bbox)
attr(observations@bbox, "dimnames")[[1]]
observations=eberg.xy
  ov <- over(observations, covariates)
  tv = all.vars(formulaString)[1]
  seln = names(covariates) %in% all.vars(formulaString)[-1]
  ov <- cbind(data.frame(observations[,tv]), ov)  
str(ov)
which(ov %in% attr(observations@bbox, "dimnames")[[1]])
which(names(ov) %in% attr(observations@bbox, "dimnames")[[1]])
  xyn <- which(ov %in% attr(observations@bbox, "dimnames")[[1]])
  if(length(xyn)==2) { 
    names(ov)[xyn] <- attr(covariates@bbox, "dimnames")[[1]][1:2] 
    } else {
    names(ov)[xyn] <- attr(covariates@bbox, "dimnames")[[1]][1:3]     
  }
str(ov)
attr(observations@bbox, "dimnames")[[1]]
attr(covariates@bbox, "dimnames")[[1]]
attr(covariates@bbox, "dimnames")[[1]][1:2]
length(xyn)==2
  xyn <- which(ov %in% attr(observations@bbox, "dimnames")[[1]])
xyn
  ov <- over(observations, covariates)
  tv = all.vars(formulaString)[1]
  seln = names(covariates) %in% all.vars(formulaString)[-1]
  ov <- cbind(data.frame(observations[,tv]), ov)  
  xyn <- which(ov %in% attr(observations@bbox, "dimnames")[[1]])
xyn
  xyn <- which(names(ov) %in% attr(observations@bbox, "dimnames")[[1]])
xyn
length(xyn)==2
xyn <- which(names(ov) %in% attr(observations@bbox, "dimnames")[[1]])
  if(length(xyn)==2) { 
    names(ov)[xyn] <- attr(covariates@bbox, "dimnames")[[1]][1:2] 
    } else {
    names(ov)[xyn] <- attr(covariates@bbox, "dimnames")[[1]]     
  }
str(ov)
q()
library(rgdal)
library(plotKML)
library(GSIF)
library(raster)
library(plyr)
library(aqp)
library(splines)
glm.formulaString2
SNDMHT.m2 <- fit.gstatModel(observations=eberg.xy, glm.formulaString2, covariates=eberg_sm@mu)
summary(SNDMHT.m2@regModel)
eberg_grids <- list(eberg_grid, eberg_grid25)
unlist(sapply(eberg_grids, names))
glm.formulaString3 = logits(SNDMHT) ~ PRMGEO6+DEMSRT6+TWISRT6+TIRAST6+LNCCOR6+TWITOPx+NVILANx+ns(altitude, df=4)
SNDMHT.m3 <- fit.gstatModel(observations=eberg.geo, glm.formulaString3, covariates=eberg_grids)  # this takes slightly more time...
glm.formulaString3
covariates=eberg_grids
observations=eberg.geo
formulaString = glm.formulaString3
!any(sapply(covariates, class)=="SpatialPixelsDataFrame")
method = list("GLM", "rpart", "randomForest", "HB")[[1]]
dimensions = list("3D", "2D", "2D+T", "3D+T")[[1]]
family = gaussian
  covs = unlist(sapply(covariates, FUN=function(x){names(x)}))
  if(!length(unique(covs))==length(covs)){ stop("'Covariates' column names must be unique") }
  methodid = all.vars(formulaString)[1]
methodid
  ov <- list(NULL)
j=1
    ov[[j]] <- over(x=covariates[[j]], y=observations, method=methodid, var.type="numeric")
str(ov[[j]])
!(names(observations@data) %in% "observationid")
  gn <- names(observations@data)[!(names(observations@data) %in% "observationid")]
ov <- list(NULL)
  for(j in 1:length(covariates)){
    ov[[j]] <- over(x=covariates[[j]], y=observations, method=methodid, var.type="numeric")
      if(nrow(ov[[j]])==0|is.null(ov[[j]]$observedValue)) {
      warning("The 'over' operations resulted in an empty set. Check 'methodid' column.")
      }
  }
  ov = Reduce(function(x,y) {merge(x[!(names(x) %in% gn)],y[!(names(y) %in% gn)], by="observationid")}, ov)
  ov = merge(observations@data, ov[,c("observationid", covs)], by="observationid")
str(ov)
  ov[,methodid] = as.numeric(ov$observedValue)
  ov$observedValue = NULL
str(ov)
nrow(ov)==0|is.null(ov$observedValue)
nrow(ov)==0|is.null(ov[,methodid])
m <- fit.regModel(formulaString = formulaString, rmatrix = ov, predictionDomain = covariates[seln], method = method, dimensions = "3D")
seln
m <- fit.regModel(formulaString = formulaString, rmatrix = ov, predictionDomain = covariates[[1]], method = method, dimensions = "3D")
ov <- list(NULL)
  for(j in 1:length(covariates)){
    ov[[j]] <- over(x=covariates[[j]], y=observations, method=methodid, var.type="numeric")
      if(nrow(ov[[j]])==0|is.null(ov[[j]]$observedValue)) {
      warning("The 'over' operations resulted in an empty set. Check 'methodid' column.")
      }
  }
str(ov[[1]])
!(names(observations@data) %in% "observationid")
  gn <- names(observations@data)[!(names(observations@data) %in% "observationid")]
  ov = Reduce(function(x,y) {merge(x[!(names(x) %in% gn)],y[!(names(y) %in% gn)], by="observationid")}, ov)
str(ov)
  ov = merge(observations@data, ov[,c("observationid", covs)], by="observationid")
str(ov)
ov <- list(NULL)
  for(j in 1:length(covariates)){
    ov[[j]] <- over(x=covariates[[j]], y=observations, method=methodid, var.type="numeric")
      if(nrow(ov[[j]])==0|is.null(ov[[j]]$observedValue)) {
      warning("The 'over' operations resulted in an empty set. Check 'methodid' column.")
      }
  }
  xy <- ov[[1]][,attr(covariates[[1]]@bbox, "dimnames")[[1]]]
  gn <- names(observations@data)[!(names(observations@data) %in% c("observationid", xyn))]
gn
  ov <- Reduce(function(x,y) {merge(x[!(names(x) %in% gn)],y[!(names(y) %in% gn)], by="observationid")}, ov)
  ov <- merge(observations@data, ov[,c("observationid", covs)], by="observationid")
str(ov)
  ov <- cbind(ov, xy) 
str(ov)
 m <- fit.regModel(formulaString = formulaString, rmatrix = ov, predictionDomain = covariates[[1]], method = method, dimensions = "3D")
  ov[,methodid] <- as.numeric(ov$observedValue)
  ov$observedValue <- NULL
nrow(ov)==0|is.null(ov[,methodid])
 m <- fit.regModel(formulaString = formulaString, rmatrix = ov, predictionDomain = covariates[[1]], method = method, dimensions = "3D")
q()
rm(list=ls(all=TRUE))
library(rgdal)
library(plotKML)
library(GSIF)
library(raster)
library(plyr)
library(aqp)
library(splines)
# load data:
data(eberg)
data(eberg_grid)
data(eberg_grid25)
str(eberg)
library(StatDA)
par(mar=c(2.5,2.5,0.5,0.5), oma=c(0,0,0,0))
edaplot(eberg$SNDMHT_A[!is.na(eberg$SNDMHT_A)], H.freq=TRUE, box=FALSE, S.pch=3, S.cex=0.5, D.lwd=1.5, P.ylab="", P.log=FALSE, P.logfine=c(5,10), P.main="", P.xlab="", B.pch=3, B.cex=0.5)
sel <- runif(nrow(eberg)) < .3
eberg.xy <- eberg[sel,]
coordinates(eberg.xy) <- ~X+Y
proj4string(eberg.xy) <- CRS("+init=epsg:31467")
gridded(eberg_grid) <- ~x+y
proj4string(eberg_grid) <- CRS("+init=epsg:31467")
gridded(eberg_grid25) <- ~x+y
proj4string(eberg_grid25) <- CRS("+init=epsg:31467")
s.lst <- c("ID", "soiltype", "TAXGRSC", "X", "Y")
h.lst <- c("UHDICM","LHDICM","SNDMHT","SLTMHT","CLYMHT")
sites <- eberg[sel,s.lst]
horizons <- getHorizons(eberg[sel,], idcol="ID", sel=h.lst)
eberg.spc <- join(horizons, sites, type='inner')
depths(eberg.spc) <- ID ~ UHDICM + LHDICM
site(eberg.spc) <- as.formula(paste("~", paste(s.lst[-1], collapse="+"), sep=""))
coordinates(eberg.spc) <- ~X+Y
proj4string(eberg.spc) <- CRS("+init=epsg:31467")
eberg.geo <- as.geosamples(eberg.spc)
str(eberg.geo)
?geosamples
eberg.geo@data[1,]
eberg.geo@data[1000,]
eberg.geo@data[5000,]
levels(eberg.geo@data$methodid)
eberg.geo@data$observationid <- paste("eberg", 1:length(eberg.geo@data$observationid), sep="")
View(eberg.geo@data)
formulaString <- ~ PRMGEO6+DEMSRT6+TWISRT6+TIRAST6
eberg_spc <- spc(eberg_grid, formulaString)
biplot(eberg_spc@pca$rotation, eberg_spc@pca$rotation)
pal = rev(rainbow(65)[1:48])
rd = range(eberg_spc@predicted@data[,1], na.rm=TRUE)
spplot(eberg_spc@predicted[1:4], at=seq(rd[1], rd[2], length.out=48), col.regions=pal)
biplot(eberg_spc@pca$rotation, eberg_spc@pca$rotation)
eberg_spc@pca$rotation
logits = function(x){log((x/100)/(1-x/100))}
glm.formulaString = as.formula(paste("logits(SNDMHT) ~ ", paste(names(eberg_spc@predicted), collapse="+"), "+ ns(altitude, df=4)"))
glm.formulaString
SNDMHT.m <- fit.gstatModel(observations=eberg.geo, glm.formulaString, covariates=eberg_spc@predicted)
summary(SNDMHT.m@regModel)
new3D <- sp3D(eberg_spc@predicted)
str(new3D[[1]]@grid)
sd.l <- lapply(new3D, FUN=function(x){predict(SNDMHT.m, predictionLocations=x, nfold=0)}) ## TH: takes some 2-3 minutes!
class(SNDMHT.m)
> data(edgeroi)
quit()
library(rgdal)
library(plotKML)
library(GSIF)
library(raster)
library(plyr)
library(aqp)
library(splines)
logits
invlogit = function(x){exp(x)/(1+exp(x))*100}
invlogit.m = function(x, v){((1+exp(-x))^(-1)-.5*v*exp(-x)*(1-exp(-x))*(1+exp(-x))^(-3) )*100}
str(sd.l[[1]])
j=1
for(j in 1:length(sd.l)){ sd.l[[j]]@predicted$SNDMHT.t <- invlogit.m(sd.l[[j]]@predicted$SNDMHT, sd.l[[j]]@predicted$var1.var) }
str(SNDMHT.gsm, max.level=2)
SNDMHT.gsm <- GlobalSoilMap(sd.ll, varname="SNDMHT", period=c("1999-02-01", "2001-07-01"))
sd.ll <- sapply(1:length(sd.l), FUN=function(x){make.3Dgrid(sd.l[[x]]@predicted[3:4], pixelsize=p, stdepths=s[x], tmp.file = FALSE)}) ## TH: takes some 2-3 minutes!
s = get("stdepths", envir = GSIF.opts)
s
sd.ll <- sapply(1:length(sd.l), FUN=function(x){make.3Dgrid(sd.l[[x]]@predicted[3:4], pixelsize=p, stdepths=s[x], tmp.file = FALSE)}) ## TH: takes some 2-3 minutes!
SNDMHT.gsm <- GlobalSoilMap(sd.ll, varname="SNDMHT", period=c("1999-02-01", "2001-07-01"))
str(SNDMHT.gsm, max.level=2)
save(SNDMHT.gsm, file="SNDMHT.rda", compress="xz") 
z0 = mean(eberg_grid$DEMSRT6, na.rm=TRUE)
for(j in 1:length(sd.ll)){
  kml(slot(SNDMHT.gsm, paste("sd", j, sep="")), folder.name=paste("eberg_sd", j, sep=""), file=paste("SNDMHT_sd", j, ".kml", sep=""), colour=observedValue, z.lim=c(10,85), raster_name=paste("SNDMHT_sd", j, ".png", sep=""), altitude=z0+5000+(s[j]*2500))
}
SNDMHT.geo <- subset(eberg.geo, method="SNDMHT")
SNDMHT.geo <- SNDMHT.geo[SNDMHT.geo$latitude>51.57&SNDMHT.geo$latitude<51.59,]
SNDMHT.geo$observedValue <- as.numeric(SNDMHT.geo$observedValue)
coordinates(SNDMHT.geo) <- ~ longitude + latitude + altitude
proj4string(SNDMHT.geo) <- CRS("+proj=longlat +datum=WGS84")
shape = "http://maps.google.com/mapfiles/kml/pal2/icon18.png"
kml(SNDMHT.geo, shape=shape, colour=observedValue, z.lim=c(10,85), file.name="SNDMHT_eberg.kml", altitude=z0+5000+(SNDMHT.geo@coords[,3]*2500), balloon=FALSE, labels="", extrude=FALSE, altitudeMode="relativeToGround", size=.3)
summary(sd.l[[1]]@predicted$SNDMHT.t)
names(sd.l[[j]]@predicted)
sd.ll <- sapply(1:length(sd.l), FUN=function(x){make.3Dgrid(sd.l[[x]]@predicted[c("SNDMHT.t","SNDMHT.svar")], pixelsize=p, stdepths=s[x], tmp.file = FALSE)}) ## TH: takes some 2-3 minutes!
SNDMHT.gsm <- GlobalSoilMap(sd.ll, varname="SNDMHT", period=c("1999-02-01", "2001-07-01"))
q()
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
summary(m$TAXGRSC)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
localH2O = h2o.init()
q()
utils:::menuInstallLocal()
library(h2o)
localH2O = h2o.init()
localH2O = h2o.init()
eberg.hex = as.h2o(m, conn = h2o.getConnection(), destination_frame = "eberg.hex")
?as.h2o
eberg.hex = as.h2o(m, destination_frame = "eberg.hex")
eberg.grid = as.h2o(eberg_grid@data, conn = h2o.getConnection(), destination_frame = "eberg.grid")
eberg.grid = as.h2o(eberg_grid@data, destination_frame = "eberg.grid")
View(eberg.hex@mutable$col_names)
eberg.hex
str(eberg.hex)
names(m)[22]
RF.m = h2o.randomForest(y = 22, x = 6:16, training_frame = eberg.hex, ntree = 50, depth = 100, importance=TRUE)
RF.m = h2o.randomForest(y = 22, x = 6:16, training_frame = eberg.hex, ntree = 50, importance=TRUE)
?h2o.randomForest
RF.m = h2o.randomForest(y = 22, x = 6:16, training_frame = eberg.hex, ntree = 50)
RF.m
rf.VI = RF.m@model$variable_importances
print(rf.rVI)
RF.m@model
rf.VI = RF.m@model$variable_importances
print(rf.VI)
eberg_grid$RFx <- as.data.frame(h2o.predict(RF.m, eberg.grid, na.action=na.pass))$predict
plot(raster(eberg_grid["RFx"]), col=SAGA_pal[[1]], zlim=c(10,90))
rf.R2 = RF.m@model$training_metrics@metrics$r2
DL.m = h2o.deeplearning(y = 22, x = 6:16, training_frame = eberg.hex)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
q()
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
str(eberg@data)
View(m)
summary(m$TAXGRSC)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
m <- m[complete.cases(m[,1:(ncol(eberg_grid)+2)]),]
m$soiltype <- as.factor(m$soiltype)
summary(m$soiltype)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
TAXGRSC.svm$tot.accuracy
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
plotKML(eberg["TAXGRSC"])
plotKML(eberg_soiltype["Rendzina"], colour_scale=SAGA_pal[[1]], z.lim=c(0,1))
plotKML(eberg_soiltype["Braunerde"], colour_scale=SAGA_pal[[1]], z.lim=c(0,1))
names(eberg)
library(h2o)
localH2O = h2o.init()
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
RF.m = h2o.randomForest(y = 22, x = 6:16, training_frame = eberg.hex, ntree = 50)
RF.m
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
q()
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
install.packages("Cubist")
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
install.packages("doMC")
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
ORCDRC.rf <- train(formulaStringP2, data=mmP2, method = "rf")
ORCDRC.rf <- train(formulaStringP2, data=mP2, method = "rf")
ORCDRC.rf
str(ORCDRC.rf)
varImp(ORCDRC.rf$finalModel)
varImpPlot(ORCDRC.rf$finalModel)
ORCDRC.cb <- train(formulaStringP2, data=mP2, method = "cubist")
ORCDRC.cb
pred1 <- predict(ORCDRC.rf, edgeroi.grids@data, na.action = na.pass)
edgeroi.grids$DEPTH = 5
pred1 <- predict(ORCDRC.rf, edgeroi.grids@data, na.action = na.pass)
pred2 <- predict(ORCDRC.cb, edgeroi.grids@data, na.action = na.pass)
str(ORCDRC.rf$finalModel)
ORCDRC.rf$finalModel
str(print(ORCDRC.rf$finalModel))
x = print(ORCDRC.rf$finalModel)
?print.randomForest
str(ORCDRC.rf)
w1 = 100*ORCDRC.rf$finalModel$test$rsq[length(ORCDRC.rf$finalModel$test$rsq)]
w1
ORCDRC.rf
str(ORCDRC.rf$finalModel)
w1 = 100*ORCDRC.rf$finalModel$rsq[length(ORCDRC.rf$finalModel$rsq)]
w1
str(ORCDRC.cb$finalModel)
ORCDRC.cb$finalModel
ORCDRC.cb
plot(ORCDRC.cb)
plot(ORCDRC.rf)
str(ORCDRC.cb)
w2 = 100*max(ORCDRC.cb$resample$Rsquared)
w2
w1 = 100*max(ORCDRC.rf$resample$Rsquared)
w1
ORCDRC.rf$finalModel$rsq[length(ORCDRC.rf$finalModel$rsq)]
w1 = 100*max(ORCDRC.rf$results$Rsquared)
w2 = 100*max(ORCDRC.cb$results$Rsquared)
w1
w2
edgeroi.grids$ORCDRC_5cm <- pred1*w1+pred2*w2/(w1+w2)
plot(raster(edgeroi.grids["ORCDRC_5cm"]), col=SAGA_pal[[1]])
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
plot(raster(edgeroi.grids["ORCDRC_5cm"]), col=SAGA_pal[[1]])
summary(m2$DEPTH)
pred1 <- predict(ORCDRC.rf, edgeroi.grids@data, na.action = na.pass)
pred2 <- predict(ORCDRC.cb, edgeroi.grids@data, na.action = na.pass)
edgeroi.grids$ORCDRC_5cm <- (pred1*w1+pred2*w2)/(w1+w2)
plot(raster(edgeroi.grids["ORCDRC_5cm"]), col=SAGA_pal[[1]])
plot(raster(edgeroi.grids["ORCDRC_5cm"]), col=SAGA_pal[[1]], zlim=c(0,35))
plot(raster(edgeroi.grids["ORCDRC_5cm"]), col=SAGA_pal[[1]], zlim=c(5,35))
edgeroi.grids$ORCDRC_5cm <- pred1
plot(raster(edgeroi.grids["ORCDRC_5cm"]), col=SAGA_pal[[1]], zlim=c(5,35))
edgeroi.grids$ORCDRC_5cm <- pred2
plot(raster(edgeroi.grids["ORCDRC_5cm"]), col=SAGA_pal[[1]], zlim=c(5,35))
edgeroi.grids$DEPTH = 25
pred1 <- predict(ORCDRC.rf, edgeroi.grids@data, na.action = na.pass)
pred2 <- predict(ORCDRC.cb, edgeroi.grids@data, na.action = na.pass)
edgeroi.grids$ORCDRC_5cm <- (pred1*w1+pred2*w2)/(w1+w2)
plot(raster(edgeroi.grids["ORCDRC_5cm"]), col=SAGA_pal[[1]], zlim=c(5,35))
edgeroi.grids$DEPTH = 2.5
pred1 <- predict(ORCDRC.rf, edgeroi.grids@data, na.action = na.pass)
pred2 <- predict(ORCDRC.cb, edgeroi.grids@data, na.action = na.pass)
edgeroi.grids$ORCDRC_5cm <- (pred1*w1+pred2*w2)/(w1+w2)
plot(raster(edgeroi.grids["ORCDRC_5cm"]), col=SAGA_pal[[1]], zlim=c(5,35))
plot(raster(edgeroi.grids["ORCDRC_5cm"]), col=SAGA_pal[[1]], zlim=c(5,45))
proj4string(eberg_grid) <- CRS("+init=epsg:31467")
q()
