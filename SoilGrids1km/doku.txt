====== 3D soil property mapping using the GSIF package ======

^ Edited by:  |  T. Hengl  |

[[http://www.isric.org/content/soilgrids|SoilGrid1km]] (available for download via [[http://soilgrids.org|www.soilgrids.org]]) contains predictions for a selection of soil properties (soil organic carbon content, soil pH, texture fractions, bulk density, coarse fragments and Cation Exchange Capacity), and soil classes (FAO's World Reference Base soil groups and USDA's Soil Taxonomy suborders). This tutorial explains how to obtain SoilGrids1km [[http://www.gdal.org/frmt_gtiff.html|GeoTiffs]], how to load the data to an R session, plot maps and run some basic analysis.

Download the tutorial as **[[https://code.google.com/p/gsif/source/browse/trunk/SoilGrids1km/tutorial_SoilGrids.R|R script]]**.


===== FTP data access =====

SoilGrids1km (GeoTiffs) can be obtained either via the web-mapping interface at www.soilgrids.org or via [[ftp://soilgrids:soilgrids@ftp.soilgrids.org|FTP]]. To download layers from R, we can use the [[http://cran.r-project.org/package=RCurl|RCurl] package:

<code rsplus>
> library(RCurl)
> sg.ftp <- "ftp://soilgrids:soilgrids@ftp.soilgrids.org/data/5.Dec.2013/"
> filenames = getURL(sg.ftp, ftp.use.epsv = FALSE, dirlistonly = TRUE)
> filenames = strsplit(filenames, "\r*\n")[[1]]
> filenames[1:5]
[1] "."
[2] ".."
[3] "TAXGWRB_Gypsisols_04_dec_2013.tif.gz"
[4] "CLYPPT_sd2_L_04_dec_2013.tif.gz"
[5] "PHIHOX_sd2_U_04_dec_2013.tif.gz"
</code>

Where ''soilgrids:soilgrids'' are the username and password for the FTP access. These shows that there are 236 layers in the ''/data/5.Dec.2013/'' directory. To download a single file we can run:

<code rsplus>
> ORC.name <- filenames[grep(filenames, pattern="ORCDRC_sd1_M")]
> ORC.name
[1] "ORCDRC_sd1_M_04_dec_2013.tif.gz"
> try(download.file(paste(sg.ftp, ORC.name, sep=""), ORC.name))
trying URL 'ftp://soilgrids:soilgrids@ftp.soilgrids.org/data/5.Dec.2013/ORCDRC_sd1_M_04_dec_2013.tif.gz'
ftp data connection made, file length 160136356 bytes
opened URL
downloaded 152.7 Mb

> library(R.utils)
> gunzip(ORC.name)
</code>

To check that they layer has been succesfully downloaded and extracted in the working directory do:

<code rsplus>
> ORC.tif <- strsplit(ORC.name, ".gz")[[1]][1]
> GDALinfo(ORC.tif)
rows        21600
columns     43200
bands       1
lower left origin.x        -180
lower left origin.y        -90
res.x       0.008333333
res.y       0.008333333
ysign       -1
oblique.x   0
oblique.y   0
driver      GTiff
projection  +proj=longlat +datum=WGS84 +no_defs
file        ORCDRC_sd1_M_04_dec_2013.tif
apparent band summary:
  GDType hasNoDataValue NoDataValue blockSize1
1  Int16           TRUE       -9999          1
  blockSize2
1      43200
apparent band statistics:
    Bmin  Bmax Bmean Bsd
1 -32768 32767    NA  NA
Metadata:
AREA_OR_POINT=Area
Warning message:
statistics not supported by this driver
</code>

Note that the compressed files are still large (from few to 200MB), so that download of all layers (ca 17GB) can take significant amount of time (depending on the network speed). Note also that the layer ''ORCDRC_sd1_M_04_dec_2013.tif'' uncompressed is almost 2GB in size. The whole stack of SoilGrids1km would also require at least 300GB hard disk space.

===== WCS data access =====

If you need to use only a subset of SoilGrids (i.e. values for a single country), then probably a better idea is to use the [[http://www.gdal.org/frmt_wcs.html|Web Coverage Service]] provided by ISRIC. Most of the SoilGrids1km layers are available via a [[http://wms3.isric.org/geoserver/web/|Geoserver installation]], so that subsets of the maps can be obtained by using the ''gdal_translate'' command i.e. without a need to download the whole layer.

Imagine if we want to obtain values of organic carbon content, bulk density and coarse fragments for Ghana. Obviously there is no need to download these layers from FTP but try to obtain just subsets that represent Ghana.

We start with determining the bounding box for Ghana. For this we use the administrative boundaries for Africa, available via this dokuwiki:

<code rsplus>
> library(rgdal)
> wg.url = "http://gsif.isric.org/lib/exe/fetch.php?media="
> if(is.na(file.info("admin.af.rda")$size)){
+   download.file(paste(wg.url, "admin.af.rda", sep=""), "admin.af.rda")
+ }
trying URL 'http://gsif.isric.org/lib/exe/fetch.php?media=admin.af.rda'
Content type 'application/r-core' length 435084 bytes (424 Kb)
opened URL
downloaded 424 Kb

> load("admin.af.rda")
> proj4string(admin.af) <- "+proj=longlat +datum=WGS84"
> country.af <- as(admin.af, "SpatialLines")
> ## Ghana bounding box:
> ghana <- admin.af[admin.af$formal_en=="Republic of Ghana",]
</code>

In the last line of the code we have created a ''SpatialPolygonDataFrame'' that is a subset of a vector map showing country borders for the whole African continent. The bounding box of this object is the bounding box of interest:

<code rsplus>
> ghana@bbox
        min       max
x -3.262509  1.187968
y  4.737128 11.162937
</code>

Next, we can also load the soil profile data from the [[http://gsif.r-forge.r-project.org/afsp.html|Africa Soil Profile DB]] available via the [[http://cran.r-project.org/package=GSIF|GSIF package]]:

<code rsplus>
> library(GSIF)
> data(afsp)
> sites <- afsp$sites
> coordinates(sites) <- ~ LONWGS84 + LATWGS84
> proj4string(sites) <- "+proj=longlat +datum=WGS84"
</code>

so that we can now plot the country of interest and distribution of soil profiles:

<code rsplus>
> plot(ghana, col="red", lwd=2, asp=1)
> lines(country.af)
> points(sites, pch="+")
</code>

<div>
| [{{:wiki:Fig_Ghana_overview_map.png?380|Distribution of soil profiles (afsp) for Ghana.}}] |
</div>

To subset Ghana from the whole global coverage GeoTiff, you can use the [[http://cran.r-project.org/package=gdalUtils|gdalUtils package]]:

<code rsplus>
> library(gdalUtils)
> gdal_setInstallation()
> te = as.vector(ghana@bbox)
> gdalwarp(ORC.tif, dstfile="ORC_sd1_Ghana.tif", te=te)
NULL
> ORCDRC_sd1_ghana <- readGDAL("ORC_sd1_Ghana.tif")
ORC_sd1_Ghana.tif has GDAL driver GTiff
and has 771 rows and 534 columns
</code>

here the command ''gdal_setInstallation()'' tries to locate GDAL utilities on your machine, and the command ''gdalwarp'' resamples/subsets the original grid to the bounding box of interest i.e. the borders of Ghana. To run this operation, you will need to install [[http://fwtools.maptools.org/|FWTools]] before you start the R session (if you are a MS Windows user). 

The size of the subset of ''ORCDRC_sd1_M_04_dec_2013.tif'' for Ghana is only 771 rows by 534 columns, hence it seems rather inefficient to download the complete coverage GeoTiff and then work on a copy on your machine. The alternative is to use the [[http://www.gdal.org/frmt_wcs.html|Web Coverage Service]] (WCS) driver available via GDAL, that will allow us to access the values for Ghana without a need to download the global GeoTiff. We start with defining the location of the WCS and the target layer. The Web Coverage Service requires that the URL of the service and the name of the target layer are specified in a local service description xml file:

<code rsplus>
> library(XML)
> ## location of service:
> wcs = "http://wms3.isric.org/geoserver/soilgrids1km/wcs?"
> ## create an XML file:
> l1 <- newXMLNode("WCS_GDAL")
> l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
> l1.l <- newXMLNode("CoverageName", var.name[1], parent=l1)
> l1
<WCS_GDAL>
  <ServiceURL>http://wms3.isric.org/geoserver/soilgrids1km/wcs?</ServiceURL>
  <CoverageName>ORCDRC_sd1</CoverageName>
</WCS_GDAL>
> xml.out <- paste(var.name[1], ".xml", sep="")
> saveXML(l1, file=xml.out)
[1] "ORCDRC_sd1.xml"
</code>

For GDAL it is enough it knows where to look and for which layer to look for. If everything is OK, we can test that GDAL can indeed access that layer:

<code rsplus>
> gdalinfo(xml.out)
 [1] "Driver: WCS/OGC Web Coverage Service"
 [2] "Files: ORCDRC_sd1.xml"
 [3] "Size is 43200, 21600"
 [4] "Coordinate System is:"
 [5] "GEOGCS[\"WGS 84\","
 [6] "    DATUM[\"WGS_1984\","
 [7] "        SPHEROID[\"WGS 84\",6378137,298.257223563,"
 [8] "            AUTHORITY[\"EPSG\",\"7030\"]],"
 [9] "        AUTHORITY[\"EPSG\",\"6326\"]],"
[10] "    PRIMEM[\"Greenwich\",0,"
[11] "        AUTHORITY[\"EPSG\",\"8901\"]],"
[12] "    UNIT[\"degree\",0.01745329251994328,"
[13] "        AUTHORITY[\"EPSG\",\"9122\"]],"
[14] "    AUTHORITY[\"EPSG\",\"4326\"]]"
[15] "Origin = (-180.000000000000000,90.000000000000000)"
[16] "Pixel Size = (0.008333333333333,-0.008333333333333)"
[17] "Corner Coordinates:"
[18] "Upper Left  (-180.0000000,  90.0000000) (180d 0'0.00\"W, 90d 0'0.00\"N)"
[19] "Lower Left  (-180.0000000, -90.0000000) (180d 0'0.00\"W, 90d 0'0.00\"S)"
[20] "Upper Right ( 180.0000000,  90.0000000) (180d 0'0.00\"E, 90d 0'0.00\"N)"
[21] "Lower Right ( 180.0000000, -90.0000000) (180d 0'0.00\"E, 90d 0'0.00\"S)"
[22] "Center      (  -0.0000000,   0.0000000) (  0d 0'0.00\"W,  0d 0'0.00\"N)"
[23] "Band 1 Block=1024x512 Type=Int16, ColorInterp=Undefined"
[24] "  Overviews: 21600x10800, 10800x5400, 5400x2700, 2700x1350, 1350x675, 675x337"
</code>

Next we want to obtain only the values of the layer for Ghana. First we need to estimate the source window i.e. the rows and columns that we would like to subset from the original GeoTiff (which has 21,600 rows and 43,200 columns):

<code rsplus>
> bb <- matrix(nrow=2, c(-180,-90,180,90))
> o.x = 43200 + round(43200*(te[1]-bb[1,2])/(bb[1,2]-bb[1,1]))
> o.y = round(21600*(bb[2,2]-te[4])/(bb[2,2]-bb[2,1]))
> d.y = round(21600*(te[4]-te[2])/(bb[2,2]-bb[2,1]))
> d.x = round(43200*(te[3]-te[1])/(bb[1,2]-bb[1,1]))
> o.x; o.y; d.x; d.y
[1] 21208
[1] 9460
[1] 534
[1] 771 
</code>

and now ''gdal_translate'' function can be used to fetch only that subset for Ghana from the server:

<code rsplus>
> gdal_translate(src_dataset=xml.out, dst_dataset="ORC_sd1_Ghana.tif", of="GTiff", srcwin=paste(c(o.x, o.y, d.x, d.y), collapse=" "))
NULL
> GDALinfo("ORC_sd1_Ghana.tif")
rows        771
columns     534
bands       1
lower left origin.x        -3.266667
lower left origin.y        4.741667
res.x       0.008333333
res.y       0.008333333
ysign       -1
oblique.x   0
oblique.y   0
driver      GTiff
projection  +proj=longlat +datum=WGS84 +no_defs
file        ORC_sd1_Ghana.tif
apparent band summary:
  GDType hasNoDataValue NoDataValue blockSize1
1  Int16          FALSE           0          7
  blockSize2
1        534
apparent band statistics:
    Bmin  Bmax Bmean Bsd
1 -32768 32767    NA  NA
Metadata:
AREA_OR_POINT=Area
Warning message:
statistics not supported by this driver
</code>

We can finally plot this map in R using the ''spplot'' command:

<code rsplus>
> data(soil.legends)
> class.labels = paste(soil.legends[["ORCDRC"]]$MIN, "\226", soil.legends[["ORCDRC"]]$MAX)
> ORCDRC_sd1_ghana$val <- cut(ORCDRC_sd1_ghana$band1, breaks=c(soil.legends[["ORCDRC"]]$MIN[1], soil.legends[["ORCDRC"]]$MAX), labels = class.labels)
> bnd <- list(list("sp.points", sites, pch="+", col="black"), list("sp.lines", country.af))
> spplot(ORCDRC_sd1_ghana["val"], col.regions=soil.legends[["ORCDRC"]]$COLOR, sp.layout=bnd, scales=list(draw=TRUE), main="Organic carbon in permilles (0\2265 cm)")
</code>

<div>
| [{{:wiki:Fig_ORC_sd1_Ghana_plot.png?380|Soil organic carbon content for Ghana obtained from SoilGrids1km.}}] |
</div>

or plot in Google Earth using the ''plotKML'' command:

<code rsplus>
> library(plotKML)
> plotKML(ORCDRC_sd1_ghana["val"], colour_scale=soil.legends[["ORCDRC"]]$COLOR)
Plotting the first variable on the list
KML file opened for writing...
Loading required package: animation
Writing to KML...
Closing  ORCDRC_sd1_ghana__val__.kml
</code>

<div>
| [{{:wiki:Fig_ORC_sd1_Ghana_plot_GE.jpg?380|Soil organic carbon content for Ghana visualized in Google Earth.}}] |
</div>

Note that both plots use standardized global [[http://gsif.r-forge.r-project.org/soil.legends.html|color legends prepared for displaying SoilGrids]]. The same way we can obtain any subset of SoilGrids1km and visualize it in R or in Google Earth. If the subset covers >40% of land surface, then it might be a better idea to obtain the whole layer from the FTP, as indicated in the previous section.

===== Deriving Soil Organic Carbon stock using SoilGrids1km =====

In the next exercise, we would like to derive total Soil Organic Carbon Stock (SOCS) using SoilGrids1km layers. We will now run processing in loops to avoid making long chunks of code. First, we need to define the layers of interest:

<code rsplus>
> ## layers of interest:
> var.name <- c(paste("ORCDRC_sd", c(1,3,5), sep=""), paste("BLD_sd", c(1,3,5), sep=""), paste("CRFVOL_sd", c(1,3,5), sep=""))
</code>

and now we can run the operations explained in the previous section in a loop:

<code rsplus>
> for(i in 1:length(var.name)){
+  t1 <- newXMLNode("WCS_GDAL")
+  t1.s <- newXMLNode("ServiceURL", wcs, parent=t1)
+  t1.l <- newXMLNode("CoverageName", var.name[i], parent=t1)
+  xml.out <- paste(var.name[i], ".xml", sep="")
+  saveXML(t1, file=xml.out)
+  f.name <- paste(var.name[i], "_Ghana.tif", sep="")
+  if(!file.exists(f.name)){
+    gdal_translate(src_dataset=xml.out, dst_dataset=f.name, of="GTiff", srcwin=paste(c(o.x, o.y, d.x, d.y), collapse=" "))
+  }
+ }
</code>

This will generate XML files and extract all layers of interest using the ''gdal_translate'' function. Note that this takes only few seconds because the subset is relatively small.

Next we read all layers of interest in R via the raster package:

<code rsplus>
> library(raster)
> ghana1km <- stack(paste(var.name, "_Ghana.tif", sep=""))
> ghana1km <- as(ghana1km, "SpatialGridDataFrame")
> str(ghana1km@data)
'data.frame':   411714 obs. of  9 variables:
 $ ORCDRC_sd1_Ghana: int  22 25 24 23 11 11 10 10 12 11 ...
 $ ORCDRC_sd3_Ghana: int  14 16 15 15 7 7 7 7 8 7 ...
 $ ORCDRC_sd5_Ghana: int  5 6 6 6 3 3 2 3 3 3 ...
 $ BLD_sd1_Ghana   : int  1303 1300 1305 1309 1306 1295 1299 1302 1278 1301 ...
 $ BLD_sd3_Ghana   : int  1352 1349 1354 1359 1356 1344 1348 1351 1328 1351 ...
 $ BLD_sd5_Ghana   : int  1464 1461 1466 1470 1468 1456 1460 1463 1440 1462 ...
 $ CRFVOL_sd1_Ghana: int  30 20 27 27 18 24 28 22 20 22 ...
 $ CRFVOL_sd3_Ghana: int  34 23 30 30 20 26 31 24 22 25 ...
 $ CRFVOL_sd5_Ghana: int  42 29 38 38 26 33 40 31 28 31 ...
</code>

This shows the values of organic carbon (''ORCDRC''), bulk density (''BLD'') and coarse fragments volumetric (''CRFVOL'') for Ghana. From these three layers we can derive the Soil Organic Carbon by using the [[http://www.eoearth.org/view/article/156087/|following function]]:

<code rsplus>
> soc <- function(ORCDRC, BLD, CRFVOL, HSIZE){ ORCDRC/1000 * HSIZE * BLD * (100-CRFVOL)/100 }
</code>

so assuming the organic carbon content in permilles of 50 (5%), bulk density of 1200 kg / per cubic meter, and 12% of coarse fragments for a volume of 30 by 100 cm, we would get (in kg per square-meter):

<code rsplus>
> soc(50, 1200, 12, .3)
[1] 15.84
</code>

We can apply the same formula to all SoilGrids1km and all standard thicknesses / depths by:

<code rsplus>
> ## get standard thicknesses:
> sds <- get("stsize", envir = GSIF.opts)
> sds
[1] 0.05 0.10 0.15 0.30 0.40 1.00
> for(j in c(1,3,5)){
+  ghana1km@data[,paste("SOC_sd", j, sep="")] <- soc(ghana1km@data[,paste("ORCDRC_sd", j, "_Ghana",sep="")], ghana1km@data[,paste("BLD_sd", j, "_Ghana",sep="")], ghana1km@data[,paste("CRFVOL_sd", j, "_Ghana",sep="")], HSIZE=sds[j])
+ }
</code>

and then sum all values for each standard thicknesses: 

<code rsplus>
> ## aggregate values:
> ghana1km$SOC <- rowSums(ghana1km@data[,paste("SOC_sd", c(1,3,5), sep="")], na.rm=TRUE)
> ## mask out missing pixels:
> ghana1km$SOC <- ifelse(ghana1km$ORCDRC_sd1_Ghana==-9999, NA, ghana1km$SOC)
</code>

so that the final estimate can be plotted by using:

<code rsplus>
> rg <- range(ghana1km$SOC, na.rm=TRUE)
> at <- expm1(seq(log1p(rg[1]), log1p(rg[2]), length.out=20))
> data(R_pal)
> spplot(ghana1km["SOC"], at=at, col.regions=R_pal[["soc_pal"]], sp.layout=bnd, scales=list(draw=TRUE), main="Total soil carbon stock in kg per square meter")
</code>

Note that here we use a log-transformed legend to emphasize lower values and adjust for the log-normal distribution of SOCS. Also note that the actual SOCS for this area is probably double than showed because we only used 1st, 3rd and 5th thickness. To derive actual SOCS for the whole depth of soil (0-200 cm), you will need to obtain all layers at all depths.

<div>
| [{{:wiki:Fig_Ghana_soil_organic_carbon_stock.png?380|Example of the Soil Organic Carbon Stock map for Ghana.}}] |
</div>

