## portion of variance exaplained by OK:
(1-var(zinc.ok.cv$residual, na.rm=T)/var(log1p(meuse$zinc), na.rm=T))*100
## portion of variance exaplained by RK:
(1-var(zinc.rk.cv$residual, na.rm=T)/var(log1p(meuse$zinc), na.rm=T))*100
## statistical comparison:
t.test(zinc.ok.cv$residual, zinc.rk.cv$residual) 
meuse.grid$zinc.BCSP <- (zinc.glm$var1.pred/zinc.glm$svar+zinc.ok$zinc.pred/zinc.ok$svar)/(1/zinc.glm$svar+1/zinc.ok$svar)
## plots next to each other:
spplot(meuse.grid[c("zinc.ok", "zinc.BCSP", "zinc.glm")], col.regions=SAGA_pal[[1]], sp.layout=list("sp.points", meuse, col="black", cex=.5))
BSCP.pol <- grid2poly(meuse.grid["zinc.BCSP"])
kml(BSCP.pol, colour=zinc.BCSP, colour_scale=SAGA_pal[[1]], kmz=TRUE)
kml(meuse, colour=zinc, labels=zinc, balloon=TRUE, kmz=TRUE)
m.glm$data$glm.res <-  m.glm$data$zinc - fitted.values(m.glm)
vrglm.fit <- fit.variogram(variogram(glm.res~1, m.glm$data), vgm(1, "Exp", 300, 1))
str(m.glm)
vrglm.fit <- fit.variogram(variogram(glm.res~1, m.glm[["data"]]), vgm(1, "Exp", 300, 1))
str(m.glm[["data"]])
pnts <- m.glm$data
coordinates(pnts) <- ~ x+y
pnts$glm.res <-  m.glm$data$zinc - fitted.values(m.glm)
vrglm.fit <- fit.variogram(variogram(glm.res~1, pnts), vgm(1, "Exp", 300, 1))
plot(variogram(glm.res~1, pnts), vrglm.fit)
zinc.okglm <- krige(glm.res~1, pnts, meuse.grid, vrglm.fit)
proj4string(pnts) <- nl.rd
zinc.okglm <- krige(glm.res~1, pnts, meuse.grid, vrglm.fit)
meuse.grid$zinc.rkglm <- zinc.glm$var1.pred + zinc.okglm$var1.pred 
meuse.grid$zinc.rkglm <- ifelse(meuse.grid$zinc.rkglm<=0, 0, meuse.grid$zinc.rkglm)
scatter.smooth(log1p(meuse.grid$zinc.rkglm), log1p(meuse.grid$zinc.BCSP))
scatter.smooth(log1p(meuse.grid$zinc.rkglm), log1p(meuse.grid$zinc.BCSP), col="red")
scatter.smooth(log1p(meuse.grid$zinc.rkglm), log1p(meuse.grid$zinc.BCSP), col="grey")
spplot(meuse.grid[c("zinc.rkglm", "zinc.BCSP")], col.regions=SAGA_pal[[1]], sp.layout=list("sp.points", meuse, col="black", cex=.5))
meuse.grid$mask <- ifelse(is.na(meuse.grid$soil), NA, 1)
meuse.grid$sqrtdist <- sqrt(meuse.grid$dist)
write.asciigrid(meuse.grid["mask"], "mask_map.asc", na.value=-1)
write.asciigrid(meuse.grid["sqrtdist"], "sqrtdist.asc", na.value=-1)
writeOGR(meuse, "meuse.shp", "meuse", "ESRI Shapefile")
mod = log1p(zinc)~sqrt(dist)+soil+ffreq
zinc.m <- fit.gstatModel(mod, meuse, meuse.grid)
zinc.m <- fit.gstatModel(mod, meuse, as(meuse.grid, "SpatialPixelsDataFrame"))
?fit.gstatModel
zinc.m <- fit.gstatModel(formulaString=mod, meuse, as(meuse.grid, "SpatialPixelsDataFrame"))
zinc.rk2 <- predict(zinc.m, as(meuse.grid, "SpatialPixelsDataFrame"))
plotKML(zinc.rk2)
plotKML(zinc.rk2, png.width = gridparameters(meuse.grid)[1,"cells.dim"]*5, png.height = gridparameters(meuse.grid)[2,"cells.dim"]*5)
q()
data(meuse)
coordinates(meuse) <- ~x+y
proj4string(meuse) <- nl.rd
## load grids:
data(meuse.grid)
meuse.grid$X <- meuse.grid$x
meuse.grid$Y <- meuse.grid$y
meuse.grid$soil <- as.factor(meuse.grid$soil)
coordinates(meuse.grid) <- ~x+y
gridded(meuse.grid) <- TRUE
fullgrid(meuse.grid) <- TRUE
proj4string(meuse.grid) <- nl.rd
library(gstat)
library(maptools)
library(rgdal)
library(lattice)
library(GSIF)
library(plotKML)
data(SAGA_pal)
data(meuse)
coordinates(meuse) <- ~x+y
proj4string(meuse) <- nl.rd
## load grids:
data(meuse.grid)
meuse.grid$X <- meuse.grid$x
meuse.grid$Y <- meuse.grid$y
meuse.grid$soil <- as.factor(meuse.grid$soil)
coordinates(meuse.grid) <- ~x+y
gridded(meuse.grid) <- TRUE
fullgrid(meuse.grid) <- TRUE
proj4string(meuse.grid) <- nl.rd
# get values from grids to points:
meuse.ov <- over(meuse, meuse.grid)
meuse.ov <- cbind(as.data.frame(meuse), meuse.ov)
zinc.id <- krige(zinc~1, meuse, meuse.grid)
zinc.tr <- krige(zinc~1, meuse, meuse.grid, degree=2, nmax=20)
zinc.tr$zinc.pred <- ifelse(zinc.tr$var1.pred<0, 0, zinc.tr$var1.pred)
zinc.lm <- krige(log1p(zinc)~sqrt(dist), meuse.ov, meuse.grid)
zinc.lm <- krige(log1p(zinc)~sqrt(dist), meuse, meuse.grid)
zinc.lm$zinc.pred <- expm1(zinc.lm$var1.pred) 
vt.fit <- fit.variogram(variogram(log1p(zinc)~1, meuse), vgm(1, "Exp", 300, 1))
plot(variogram(log1p(zinc)~1, meuse), vt.fit)
zinc.ok <- krige(log1p(zinc)~1, meuse, meuse.grid, vt.fit)
zinc.ok$zinc.pred <- expm1(zinc.ok$var1.pred) 
zinc.ok$svar <- zinc.ok$var1.var/var(log1p(meuse$zinc))
m.glm <- glm(zinc~sqrt(dist)+soil+ffreq, meuse.ov, family=gaussian(link=log))
summary(m.glm)
p.glm <- predict(m.glm, newdata=meuse.grid, type="response", se.fit=TRUE)
zinc.glm <- as(meuse.grid["soil"], "SpatialPointsDataFrame")
zinc.glm$var1.pred <- p.glm$fit
zinc.glm$var1.var <- p.glm$se.fit^2 + p.glm[["residual.scale"]]^2
zinc.glm$svar <- zinc.glm$var1.var/(m.glm$null.deviance/m.glm$df.null)
summary(zinc.glm$svar)
gridded(zinc.glm) <- TRUE
fullgrid(zinc.glm) <- TRUE
vr.fit <- fit.variogram(variogram(log1p(zinc)~sqrt(dist)+soil+ffreq, meuse), vgm(1, "Exp", 300, 1))
vr.fit <- fit.variogram(variogram(log1p(zinc)~sqrt(dist)+soil+ffreq, meuse), vgm(1, "Exp", 300, 1))
plot(variogram(log1p(zinc)~sqrt(dist)+soil+ffreq, meuse), vr.fit)
zinc.rk <- krige(log1p(zinc)~sqrt(dist)+soil+ffreq, meuse, meuse.grid, vr.fit)
zinc.rk$zinc.pred <- expm1(zinc.rk$var1.pred) 
meuse.grid$zinc.id <- zinc.id$var1.pred
meuse.grid$zinc.tr <- zinc.tr$zinc.pred
meuse.grid$zinc.lm <- zinc.lm$zinc.pred
meuse.grid$zinc.ok <- zinc.ok$zinc.pred
meuse.grid$zinc.glm <- zinc.glm$var1.pred
meuse.grid$zinc.rk <- zinc.rk$zinc.pred
spplot(meuse.grid[c("zinc.ok", "zinc.glm", "zinc.rk", "zinc.id", "zinc.tr", "zinc.lm")], col.regions=SAGA_pal[[1]])
pc.preds <- prcomp(~zinc.id+zinc.tr+zinc.lm+zinc.ok+zinc.glm+zinc.rk, scale=F, meuse.grid)
biplot(pc.preds, cex=0.9, xlabs=rep(".", length(pc.preds$x[,1])), xlim=c(-0.06,0.025), ylim=c(-0.04,0.03))
library(gstat)
library(maptools)
library(rgdal)
library(lattice)
library(GSIF)
library(plotKML)
data(SAGA_pal)
library(RCurl)
urlExists = url.exists("http://spatialreference.org/ref/sr-org/6781/proj4/")
if(urlExists){ 
  nl.rd <- CRS(getURL("http://spatialreference.org/ref/sr-org/6781/proj4/"))
} else {
  nl.rd <- CRS("+init=epsg:28992")
}
nl.rd
data(meuse)
coordinates(meuse) <- ~x+y
proj4string(meuse) <- nl.rd
data(meuse.grid)
meuse.grid$X <- meuse.grid$x
meuse.grid$Y <- meuse.grid$y
meuse.grid$soil <- as.factor(meuse.grid$soil)
coordinates(meuse.grid) <- ~x+y
gridded(meuse.grid) <- TRUE
fullgrid(meuse.grid) <- TRUE
proj4string(meuse.grid) <- nl.rd
meuse.ov <- over(meuse, meuse.grid)
meuse.ov <- cbind(as.data.frame(meuse), meuse.ov)
names(meuse.ov)
zinc.id <- krige(zinc~1, meuse, meuse.grid)
zinc.tr <- krige(zinc~1, meuse, meuse.grid, degree=2, nmax=20)
zinc.tr$zinc.pred <- ifelse(zinc.tr$var1.pred<0, 0, zinc.tr$var1.pred)
zinc.lm <- krige(log1p(zinc)~sqrt(dist), meuse, meuse.grid)
zinc.lm$zinc.pred <- expm1(zinc.lm$var1.pred) 
vt.fit <- fit.variogram(variogram(log1p(zinc)~1, meuse), vgm(1, "Exp", 300, 1))
hist(meuse$zinc)
hist(log1p(meuse$zinc)
)
plot(variogram(log1p(zinc)~1, meuse), vt.fit)
zinc.ok <- krige(log1p(zinc)~1, meuse, meuse.grid, vt.fit)
zinc.ok$zinc.pred <- expm1(zinc.ok$var1.pred) 
zinc.ok$svar <- zinc.ok$var1.var/var(log1p(meuse$zinc))
m.glm <- glm(zinc~sqrt(dist)+soil+ffreq, meuse.ov, family=gaussian(link=log))
summary(m.glm)
p.glm <- predict(m.glm, newdata=meuse.grid, type="response", se.fit=TRUE)
zinc.glm <- as(meuse.grid["soil"], "SpatialPointsDataFrame")
zinc.glm$var1.pred <- p.glm$fit
zinc.glm$var1.var <- p.glm$se.fit^2 + p.glm[["residual.scale"]]^2
zinc.glm$svar <- zinc.glm$var1.var/(m.glm$null.deviance/m.glm$df.null)
summary(zinc.glm$svar)
gridded(zinc.glm) <- TRUE
fullgrid(zinc.glm) <- TRUE
vr.fit <- fit.variogram(variogram(log1p(zinc)~sqrt(dist)+soil+ffreq, meuse), vgm(1, "Exp", 300, 1))
plot(variogram(log1p(zinc)~sqrt(dist)+soil+ffreq, meuse), vr.fit)
zinc.rk <- krige(log1p(zinc)~sqrt(dist)+soil+ffreq, meuse, meuse.grid, vr.fit)
zinc.rk$zinc.pred <- expm1(zinc.rk$var1.pred) 
meuse.grid$zinc.id <- zinc.id$var1.pred
meuse.grid$zinc.tr <- zinc.tr$zinc.pred
meuse.grid$zinc.lm <- zinc.lm$zinc.pred
meuse.grid$zinc.ok <- zinc.ok$zinc.pred
meuse.grid$zinc.glm <- zinc.glm$var1.pred
meuse.grid$zinc.rk <- zinc.rk$zinc.pred
spplot(meuse.grid[c("zinc.ok", "zinc.glm", "zinc.rk", "zinc.id", "zinc.tr", "zinc.lm")], col.regions=SAGA_pal[[1]])
mod = log1p(zinc)~sqrt(dist)+soil+ffreq
zinc.m <- fit.gstatModel(formulaString=mod, meuse, as(meuse.grid, "SpatialPixelsDataFrame"))
zinc.rk2 <- predict(zinc.m, as(meuse.grid, "SpatialPixelsDataFrame"))
plotKML(zinc.rk2, png.width = gridparameters(meuse.grid)[1,"cells.dim"]*5, png.height = gridparameters(meuse.grid)[2,"cells.dim"]*5)
pc.preds <- prcomp(~zinc.id+zinc.tr+zinc.lm+zinc.ok+zinc.glm+zinc.rk, scale=F, meuse.grid)
biplot(pc.preds, cex=0.9, xlabs=rep(".", length(pc.preds$x[,1])), xlim=c(-0.06,0.025), ylim=c(-0.04,0.03))
zinc.ok.cv <- krige.cv(log1p(zinc)~1, meuse, vt.fit, nfold=5)
zinc.rk.cv <- krige.cv(log1p(zinc)~sqrt(dist)+soil+ffreq, meuse, vr.fit, nfold=5)
(1-var(zinc.ok.cv$residual, na.rm=T)/var(log1p(meuse$zinc), na.rm=T))*100
(1-var(zinc.rk.cv$residual, na.rm=T)/var(log1p(meuse$zinc), na.rm=T))*100
system.time(krige(log1p(zinc)~1, meuse, meuse.grid, vt.fit))[3]
system.time(krige(log1p(zinc)~sqrt(dist)+soil+ffreq, meuse, meuse.grid, vr.fit))[3]
meuse.grid$zinc.BCSP <- (zinc.glm$var1.pred/zinc.glm$svar+zinc.ok$zinc.pred/zinc.ok$svar)/(1/zinc.glm$svar+1/zinc.ok$svar)
spplot(meuse.grid[c("zinc.ok", "zinc.BCSP", "zinc.glm")], col.regions=SAGA_pal[[1]], sp.layout=list("sp.points", meuse, col="black", cex=.5))
spplot(meuse.grid[c("zinc.ok", "zinc.BCSP", "zinc.glm")], col.regions=SAGA_pal[[1]], sp.layout=list("sp.points", meuse, col="black", cex=.5))
BSCP.pol <- grid2poly(meuse.grid["zinc.BCSP"])
kml(BSCP.pol, colour=zinc.BCSP, colour_scale=SAGA_pal[[1]], kmz=TRUE)
kml(meuse, colour=zinc, labels=zinc, balloon=TRUE, kmz=TRUE)
quit()
library(sp)
library(GSIF)
library(randomForest)
library(plotKML)
data(SAGA_pal)
demo(meuse, echo=FALSE)
omm <- fit.gstatModel(meuse, log1p(om)~dist+ffreq, meuse.grid)
om.rk <- predict(omm, meuse.grid)
om.rk
v = omm@vgmModel
class(v) = c("variogramModel", "data.frame")
om.uk <- krige(log1p(om)~dist+ffreq, meuse[-omm@regModel$na.action,], meuse.grid, model=v)
library(gstat)
om.uk <- krige(log1p(om)~dist+ffreq, meuse[-omm@regModel$na.action,], meuse.grid, model=v)
str(om.uk)
omm2 <- fit.gstatModel(meuse, log1p(om)~dist+ffreq, meuse.grid, method="randomForest")
om.rfk <- predict(omm2, meuse.grid)
meuse.grid$om.rk <- om.rk@predicted$om
meuse.grid$om.rfk <- om.rfk@predicted$om
spplot(meuse.grid[c("om.rk", "om.rfk")], col.regions=SAGA_pal[[1]], names.attr=c("regression-kriging", "randomForest-kriging"), sp.layout=list("sp.points", meuse, pch="+", cex=1.5, col="black"))
meuse.ov <- over(meuse, meuse.grid)
meuse.ov <- cbind(meuse.ov, meuse@data)
omm0 <- glm(log1p(om)~dist+ffreq, meuse.ov, family=gaussian())
om.glm <- predict.glm(omm0, meuse.grid, se.fit=TRUE)
str(om.glm)
meuse.grid$om.glmvar <- om.glm[["se.fit"]]^2+om.glm[["residual.scale"]]^2
summary(meuse.grid$om.glmvar)
summary(om.uk$var1.var)
om.glm[["residual.scale"]]^2
meuse.ov <- meuse.ov[-omm0$na.action,]
omm3 <- randomForest(log1p(om)~dist+ffreq, meuse.ov)
om.rf <- predict(omm3, meuse.grid)
str(om.rf)
library(quantregForest)
ommX <- quantregForest(y=log1p(meuse.ov$om), x=meuse.ov[,c("dist", "ffreq")])
c((1-.682)/2, 1-(1-.682)/2)
om.rf.quant <- predict(ommX, meuse.grid@data[,c("dist", "ffreq")], quantiles=c((1-.682)/2, 1-(1-.682)/2))
str(om.rf.quant)
meuse.grid$om.rfvar2 <- ((om.rf.quant[,1] - om.rf.quant[,2])/2)^2
spplot(meuse.grid[c("om.glmvar", "om.rfvar2")], col.regions=SAGA_pal[[12]], names.attr=c("regression variance", "randomForest variance"), sp.layout=list("sp.points", meuse, pch="+", cex=1.5, col="black"))
omm2 <- fit.gstatModel(meuse, log1p(om)~dist+ffreq, meuse.grid, method="quantregForest")
om.rfk <- predict(omm2, meuse.grid)
meuse.grid$om.rfkvar <- om.rfk@predicted$var1.var 
meuse.grid$om.ukvar <- om.uk$var1.var
spplot(meuse.grid[c("om.ukvar", "om.rfkvar")], col.regions=SAGA_pal[[12]], names.attr=c("universal kriging variance", "randomForest-kriging variance"), sp.layout=list("sp.points", meuse, pch="+", cex=1.5, col="black"))
str(om.rk@predicted)
pre.r <- range(c(om.rk@predicted$om, om.rfk@predicted$om, om.rfk@predicted$om), na.rm=TRUE)
pre.r
omm3 <- fit.gstatModel(meuse, log1p(om)~dist+ffreq, meuse.grid, method="quantregForest")
omm4 <- fit.gstatModel(meuse, log1p(om)~dist+ffreq, meuse.grid, method="quantregForest")
om.rfk1 <- predict(omm4, meuse.grid)
omm5 <- fit.gstatModel(meuse, log1p(om)~dist+ffreq, meuse.grid, method="quantregForest")
om.rfk2 <- predict(omm5, meuse.grid)
om.rfk1
om.rfk2
om.rk
meuse.grid$om.rfkvar <- om.rfk1@predicted$var1.var 
meuse.grid$om.ukvar <- om.uk$var1.var
spplot(meuse.grid[c("om.ukvar", "om.rfkvar")], col.regions=SAGA_pal[[12]], names.attr=c("universal kriging variance", "randomForest-kriging variance"), sp.layout=list("sp.points", meuse, pch="+", cex=1.5, col="black"))
pre.r <- range(c(om.rk@predicted$om, om.rfk1@predicted$om, om.rfk1@predicted$om), na.rm=TRUE)
var.r <- range(c(om.rk@predicted$var1.pred, om.rfk@predicted$var1.pred, om.rfk@predicted$var1.pred), na.rm=TRUE)
var.r
var.r <- range(c(om.rk@predicted$var1.var, om.rfk@predicted$var1.var, om.rfk@predicted$var1.var), na.rm=TRUE)
var.r
image(raster(om.rk@predicted["om"]), main="regression-kriging", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r)
library(raster)
image(raster(om.rk@predicted["om"]), main="regression-kriging", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r)
points(meuse, pch="+")
image(raster(om.rk@predicted["om"]), main="regression-kriging", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r)
points(meuse, pch="+", cex=.8)
image(raster(om.rk@predicted["var1.var"]), main="regression-kriging", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r)
points(meuse, pch="+", cex=.8)
image(raster(om.rkfk1@predicted["om"]), main="regression-kriging", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r)
image(raster(om.rfk1@predicted["om"]), main="regression-kriging", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r)
points(meuse, pch="+", cex=.8)
image(raster(om.rfk1@predicted["var1.var"]), main="variance", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r)
points(meuse, pch="+", cex=.8)
summary(om.rfk1)
show(om.rfk1)
str(om.rfk1)
str(om.rfk1@regModel.summary)
om.rfk1@regModel.summary
object = om.rfk1
all.vars(deparse(object@regModel.summary$call$formula))[-1]
class(object)
class(object@regModel.summary)
unclass(om.rfk1@regModel.summary)
is.NULL(object@regModel.summary$terms)
is.null(object@regModel.summary$terms)
tvar.rk <- 1-var(om.rk@validation$residual, na.rm=T)/var(om.rk@validation$observed, na.rm=T)
tvar.rfk1 <- 1-var(om.rfk1@validation$residual, na.rm=T)/var(om.rfk1@validation$observed, na.rm=T)
tvar.rfk2 <- 1-var(om.rfk2@validation$residual, na.rm=T)/var(om.rfk2@validation$observed, na.rm=T)
image(raster(om.rk@predicted["var1.var"]), main=paste("variance (explained: ", signif(tvar.rk*100, 2),"\%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r)
image(raster(om.rk@predicted["var1.var"]), main=paste("variance (explained: ", signif(tvar.rk*100, 2),"%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r)
image(raster(om.rk@predicted["var1.var"]), main=paste("variance (explained: ", signif(tvar.rk*100, 2),"%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r, main.cex=.8)
?par
image(raster(om.rk@predicted["var1.var"]), main=paste("variance (explained: ", signif(tvar.rk*100, 2),"%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r, cex.main=.8)
par(mfrow=c(3,2), mar=c(0,0,2.5,0), oma=c(0,0,0,0))
image(raster(om.rk@predicted["om"]), main="regression-kriging", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r, cex.main=.8)
points(meuse, pch="+", cex=.8)
image(raster(om.rk@predicted["var1.var"]), main=paste("variance (explained: ", signif(tvar.rk*100, 2),"%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r, cex.main=.8)
points(meuse, pch="+", cex=.8)
image(raster(om.rfk1@predicted["om"]), main="randomForest-kriging #1", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r, cex.main=.8)
points(meuse, pch="+", cex=.8)
image(raster(om.rfk1@predicted["var1.var"]), main=paste("variance (explained: ", signif(tvar.rfk1*100, 2),"%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r, cex.main=.8)
points(meuse, pch="+", cex=.8)
image(raster(om.rfk2@predicted["om"]), main="randomForest-kriging #1", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r, cex.main=.8)
points(meuse, pch="+", cex=.8)
image(raster(om.rfk2@predicted["var1.var"]), main=paste("variance (explained: ", signif(tvar.rfk1*100, 2),"%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r, cex.main=.8)
points(meuse, pch="+", cex=.8)
rxV <- rev(as.character(round(seq(pre.r[1], pre.r[2], length.out=5)), 0))
par(mfrow=c(2,3), mar=c(0,0,2.5,0), oma=c(0,0,0,0))
image(raster(om.rk@predicted["om"]), main="regression-kriging", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r, cex.main=.8)
points(meuse, pch="+", cex=.8)
legend("topleft", rxV, fill=rev(SAGA_pal[[1]][c(1,5,10,15,20)]), horiz=FALSE, bty="n", y.intersp=1.5)
image(raster(om.rfk1@predicted["om"]), main="randomForest-kriging #1", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r, cex.main=.8)
points(meuse, pch="+", cex=.8)
image(raster(om.rk@predicted["var1.var"]), main=paste("variance (explained: ", signif(tvar.rk*100, 2),"%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r, cex.main=.8)
points(meuse, pch="+", cex=.8)
image(raster(om.rfk2@predicted["om"]), main="randomForest-kriging #2", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r, cex.main=.8)
points(meuse, pch="+", cex=.8)
image(raster(om.rk@predicted["om"]), main="regression-kriging", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r, cex.main=.8)
points(meuse, pch="+", cex=.8)
legend("topleft", rxV, fill=rev(SAGA_pal[[1]][c(1,5,10,15,20)]), horiz=FALSE, bty="n", y.intersp=1.5)
rxV <- rev(as.character(round(seq(pre.r[1], pre.r[2], length.out=5)), 2))
image(raster(om.rk@predicted["om"]), main="regression-kriging", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r)
points(meuse, pch="+", cex=.8)
legend("topleft", rxV, fill=rev(SAGA_pal[[1]][c(1,5,10,15,20)]), horiz=FALSE, bty="n", y.intersp=1.5)
rxV <- rev(as.character(round(seq(pre.r[1], pre.r[2], length.out=5), 2)))
image(raster(om.rk@predicted["om"]), main="regression-kriging", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r)
points(meuse, pch="+", cex=.8)
legend("topleft", rxV, fill=rev(SAGA_pal[[1]][c(1,5,10,15,20)]), horiz=FALSE, bty="n", y.intersp=1.5)
image(raster(om.rfk1@predicted["om"]), main="randomForest-kriging #1", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r)
points(meuse, pch="+", cex=.8)
image(raster(om.rfk2@predicted["om"]), main="randomForest-kriging #2", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r)
points(meuse, pch="+", cex=.8)
rvV <- rev(as.character(round(seq(var.r[1], var.r[2], length.out=5), 4)))
rvV
image(raster(om.rk@predicted["var1.var"]), main=paste("variance (explained: ", signif(tvar.rk*100, 2),"%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r)
points(meuse, pch="+", cex=.8)
legend("topleft", rvV, fill=rev(SAGA_pal[[12]][c(1,5,10,15,20)]), horiz=FALSE, bty="n", y.intersp=1.5)
image(raster(om.rfk1@predicted["var1.var"]), main=paste("variance (explained: ", signif(tvar.rfk1*100, 2),"%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r, cex.main=.8)
points(meuse, pch="+", cex=.8)
image(raster(om.rfk2@predicted["var1.var"]), main=paste("variance (explained: ", signif(tvar.rfk1*100, 2),"%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r, cex.main=.8)
str(om.uk)
pre.r <- range(c(om.uk$var1.pred, om.rfk1@predicted$om, om.rfk1@predicted$om), na.rm=TRUE)
pre.r
var.r <- range(c(om.uk$var1.var, om.rfk@predicted$var1.var, om.rfk@predicted$var1.var), na.rm=TRUE)
var.r
rxV <- rev(as.character(round(seq(pre.r[1], pre.r[2], length.out=5), 2)))
rvV <- rev(as.character(round(seq(var.r[1], var.r[2], length.out=5), 4)))
image(raster(om.uk["var1.pred"]), main="regression-kriging", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r)
points(meuse, pch="+", cex=.8)
legend("topleft", rxV, fill=rev(SAGA_pal[[1]][c(1,5,10,15,20)]), horiz=FALSE, bty="n", y.intersp=1.5)
image(raster(om.rfk1@predicted["om"]), main="randomForest-kriging #1", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r)
points(meuse, pch="+", cex=.8)
image(raster(om.rfk2@predicted["om"]), main="randomForest-kriging #2", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r)
points(meuse, pch="+", cex=.8)
image(raster(om.uk["var1.var"]), main=paste("variance (explained: ", signif(tvar.rk*100, 2),"%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r)
points(meuse, pch="+", cex=.8)
legend("topleft", rvV, fill=rev(SAGA_pal[[12]][c(1,5,10,15,20)]), horiz=FALSE, bty="n", y.intersp=1.5)
image(raster(om.rfk1@predicted["var1.var"]), main=paste("variance (explained: ", signif(tvar.rfk1*100, 2),"%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r)
points(meuse, pch="+", cex=.8)
image(raster(om.rfk2@predicted["var1.var"]), main=paste("variance (explained: ", signif(tvar.rfk1*100, 2),"%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r)
points(meuse, pch="+", cex=.8)
pre.r <- range(c(om.uk$var1.pred, om.rfk1@predicted$var1.pred, om.rfk1@predicted$var1.pred), na.rm=TRUE)
omm4 <- fit.gstatModel(meuse, log1p(om)~dist+ffreq, meuse.grid, method="quantregForest")
om.rfk1 <- predict(omm4, meuse.grid)
omm5 <- fit.gstatModel(meuse, log1p(om)~dist+ffreq, meuse.grid, method="quantregForest")
om.rfk2 <- predict(omm5, meuse.grid)
meuse.grid$om.rfkvar <- om.rfk1@predicted$var1.var 
meuse.grid$om.ukvar <- om.uk$var1.var
spplot(meuse.grid[c("om.ukvar", "om.rfkvar")], col.regions=SAGA_pal[[12]], names.attr=c("universal kriging variance", "randomForest-kriging variance"), sp.layout=list("sp.points", meuse, pch="+", cex=1.5, col="black"))
pre.r <- range(c(om.uk$var1.pred, om.rfk1@predicted$var1.pred, om.rfk1@predicted$var1.pred), na.rm=TRUE)
var.r <- range(c(om.uk$var1.var, om.rfk@predicted$var1.var, om.rfk@predicted$var1.var), na.rm=TRUE)
tvar.rk <- 1-var(om.rk@validation$residual, na.rm=T)/var(om.rk@validation$observed, na.rm=T)
tvar.rfk1 <- 1-var(om.rfk1@validation$residual, na.rm=T)/var(om.rfk1@validation$observed, na.rm=T)
tvar.rfk2 <- 1-var(om.rfk2@validation$residual, na.rm=T)/var(om.rfk2@validation$observed, na.rm=T)
rxV <- rev(as.character(round(seq(pre.r[1], pre.r[2], length.out=5), 2)))
rvV <- rev(as.character(round(seq(var.r[1], var.r[2], length.out=5), 4)))
par(mfrow=c(2,3), mar=c(0,0,2.5,0), oma=c(0,0,0,0))
image(raster(om.uk["var1.pred"]), main="regression-kriging", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r)
points(meuse, pch="+", cex=.8)
legend("topleft", rxV, fill=rev(SAGA_pal[[1]][c(1,5,10,15,20)]), horiz=FALSE, bty="n", y.intersp=1.5)
image(raster(om.rfk1@predicted["var1.pred"]), main="randomForest-kriging #1", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r)
points(meuse, pch="+", cex=.8)
image(raster(om.rfk2@predicted["var1.pred"]), main="randomForest-kriging #2", asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[1]], zlim=pre.r)
points(meuse, pch="+", cex=.8)
image(raster(om.uk["var1.var"]), main=paste("variance (explained: ", signif(tvar.rk*100, 2),"%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r)
points(meuse, pch="+", cex=.8)
legend("topleft", rvV, fill=rev(SAGA_pal[[12]][c(1,5,10,15,20)]), horiz=FALSE, bty="n", y.intersp=1.5)
image(raster(om.rfk1@predicted["var1.var"]), main=paste("variance (explained: ", signif(tvar.rfk1*100, 2),"%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r)
points(meuse, pch="+", cex=.8)
image(raster(om.rfk2@predicted["var1.var"]), main=paste("variance (explained: ", signif(tvar.rfk1*100, 2),"%)", sep=""), asp=1, axes=FALSE, xlab="", ylab="", col=SAGA_pal[[12]], zlim=var.r)
points(meuse, pch="+", cex=.8)
q()
startSocketServer(port=8889)
startSocketServer(port=8889)
.trPaths <- file.path(Sys.getenv('APPDATA'), 'Tinn-R', 'tmp', c('', 'search.txt', 'objects.txt', 'file.r', 'selection.r', 'block.r', 'lines.r', 'reformat-input.r', 'reformat-output.r'), fsep='\\')
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
data(SAGA_pal)
demo(meuse, echo=FALSE)
omm <- fit.gstatModel(meuse, log1p(om)~dist+ffreq, meuse.grid)
install.packages("nortest")
om.rk <- predict(omm, meuse.grid)
om.rk
str(om.rk@regModel)
str(omm@regModel)
om.rksim <- predict(omm, meuse.grid, nsim=5)
om.rksim <- predict(omm, meuse.grid, nsim=1)
str(om.rksim)
ov <- extract(meuse, om.rksim@realizations)
ov <- extract(om.rksim@realizations, meuse)
str(ov)
om.rksim <- predict(omm, meuse.grid, nsim=5)
ov <- extract(om.rksim@realizations, meuse)
meuse$om.sim1 <- ov[,1]
boxplot(log1p(om)~ffreq, omm@regModel$data)
boxplot(log1p(om)~ffreq, omm@regModel$data, col="grey")
boxplot(om~ffreq, omm@regModel$data, col="grey")
boxplot(om~ffreq, omm@regModel$data, col="grey", xlab="Flooding frequency classes", ylab="Organic matter in %", main="Measured")
boxplot(log1p(om.sim1)~ffreq, meuse, col="grey", xlab="Flooding frequency classes", ylab="Organic matter in %", main="Predicted")
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
meuse$om.sim1 <- expm1(ov[,1])
boxplot(om~ffreq, omm@regModel$data, col="grey", xlab="Flooding frequency classes", ylab="Organic matter in %", main="Measured")
boxplot(om.sim1~ffreq, meuse, col="grey", xlab="Flooding frequency classes", ylab="Organic matter in %", main="Predicted")
mean(om~ffreq, omm@regModel$data)
omm0 <- lm(om~ffreq, omm@regModel$data)
summary(omm0)
omm0 <- lm(log1p(om)~ffreq, omm@regModel$data)
?predict.lm
om.r <- predict(omm0, meuse.grid, se.fit=TRUE)
str(om.r)
summary(meuse.grid$se.fit)
meuse.grid$se.fit <- om.r$se.fit
summary(meuse.grid$se.fit)
omm0 <- lm(om~ffreq, omm@regModel$data)
om.r <- predict(omm0, meuse.grid, se.fit=TRUE)
meuse.grid$se.fit <- om.r$se.fit
summary(meuse.grid$se.fit)
sd.om <- qt(0.975, df=length(meuse$om)-1)*sd(meuse$om)/sqrt(length(meuse$om))
sd.om
sd.om <- qt(0.975, df=length(meuse$om)-1)*sd(meuse$om, na.rm=TRUE)/sqrt(length(meuse$om))
sd.om
str(om.rksim@realizations[1])
str(om.rksim@realizations[,1])
str(om.rksim@realizations[1,])
str(om.rk@predicted)
meuse.grid$om.rk <- expm1(om.rk@predicted$om)
rksim <- as(om.rksim@realizations, "SpatialGridDataFrame")
str(rksim)
ov <- as(om.rksim@realizations, "SpatialGridDataFrame")
str(meuse.grid)
meuse.grid$om.sim1 <- expm1(ov@data[,1][meuse.grid@grid.index])
par(mfrow=c(1,2))
boxplot(om~ffreq, omm@regModel$data, col="grey", xlab="Flooding frequency classes", ylab="Organic matter in %", main="Measured")
boxplot(om.sim1~ffreq, meuse.grid, col="grey", xlab="Flooding frequency classes", ylab="Organic matter in %", main="Predicted")
boxplot(om~ffreq, omm@regModel$data, col="grey", xlab="Flooding frequency classes", ylab="Organic matter in %", main="Measured", ylim=c(0,20))
boxplot(om.sim1~ffreq, meuse.grid, col="grey", xlab="Flooding frequency classes", ylab="Organic matter in %", main="Predicted", ylim=c(0,20))
lapply(levels(meuse.ffreq), function(x){sd(subset(meuse.grid, ffreq==x, select=om.sim1))})
source('C:/Roaming/Tinn-R/tmp/sgInfo.R')
startSocketServer(port=8889)
x = 
lapply(levels(meuse.ffreq), function(x){sd(subset(meuse.grid, ffreq==x, select=om.sim1), na.rm=TRUE)})
levels(meuse.ffreq)
levels(meuse.grid$ffreq)
lapply(levels(meuse.grid$ffreq), function(x){sd(subset(meuse.grid, ffreq==x, select=om.sim1), na.rm=TRUE)})
lapply(levels(meuse.grid$ffreq), function(x){sd(subset(meuse.grid@data, ffreq==x, select=om.sim1), na.rm=TRUE)})
str(subset(meuse.grid@data, ffreq==x, select=om.sim1))
x = levels(meuse.grid$ffreq)[1]
str(subset(meuse.grid@data, ffreq==x, select=om.sim1))
sd(subset(meuse.grid@data, ffreq==x, select=om.sim1), na.rm=TRUE)
lapply(levels(meuse.grid$ffreq), function(x){sapply(subset(meuse.grid@data, ffreq==x, select=om.sim1), sd, na.rm=TRUE)})
aggregate(meuse.grid$se.fit, by=list(meuse.grid$ffreq), mean, na.rm=TRUE)
sd.om
q()
startSocketServer(port=8889)
sd(meuse$om, na.rm=TRUE)
sd(meuse$om, na.rm=TRUE)
.trPaths <- file.path(Sys.getenv('APPDATA'), 'Tinn-R', 'tmp', c('', 'search.txt', 'objects.txt', 'file.r', 'selection.r', 'block.r', 'lines.r', 'reformat-input.r', 'reformat-output.r'), fsep='\\')
aggregate(meuse.grid$se.fit, by=list(meuse.grid$ffreq), mean, na.rm=TRUE)
aggregate(meuse.grid$om.sim1, by=list(meuse.grid$ffreq), mean, na.rm=TRUE)
str(om.r)
aggregate(sqrt(meuse.grid$om.sim1^2+om.r$residual.scale^2), by=list(meuse.grid$ffreq), mean, na.rm=TRUE)
aggregate(sqrt(meuse.grid$se.fit^2+om.r$residual.scale^2) - meuse.grid$se.fit, by=list(meuse.grid$ffreq), mean, na.rm=TRUE)
aggregate(sqrt(meuse.grid$se.fit^2+om.r$residual.scale^2), by=list(meuse.grid$ffreq), mean, na.rm=TRUE)
aggregate(meuse.grid$om.sim1, by=list(meuse.grid$ffreq), mean, na.rm=TRUE)
omm0 <- lm(om~ffreq, omm@regModel$data)
om.r <- predict(omm0, meuse.grid, se.fit=TRUE)
meuse.grid$se.fit <- om.r$se.fit
summary(meuse.grid$se.fit)
aggregate(meuse.grid$se.fit, by=list(meuse.grid$ffreq), mean, na.rm=TRUE)
aggregate(sqrt(meuse.grid$se.fit^2+om.r$residual.scale^2), by=list(meuse.grid$ffreq), mean, na.rm=TRUE)
meuse.grid$om.rk <- om.rk@predicted$om
aggregate(meuse.grid$om.rk, by=list(meuse.grid$ffreq), mean, na.rm=TRUE)
meuse.grid$om.rk <- expm1(om.rk@predicted$om)
aggregate(meuse.grid$om.rk, by=list(meuse.grid$ffreq), mean, na.rm=TRUE)
aggregate(sqrt(meuse.grid$se.fit^2+om.r$residual.scale^2), by=list(meuse.grid$ffreq), mean, na.rm=TRUE)
aggregate(meuse.grid$om.rk, by=list(meuse.grid$ffreq), mean, na.rm=TRUE)
aggregate(meuse.grid$om.sim1, by=list(meuse.grid$ffreq), sd, na.rm=TRUE)
q()
source('C:/Roaming/Tinn-R/tmp/sgInfo.R')
startSocketServer(port=8889)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
lapply(levels(meuse.grid$ffreq), function(x){sapply(subset(meuse.grid@data, ffreq==x, select=om.sim1), sd, na.rm=TRUE)})
sd.om <- qt(0.975, df=length(meuse$om)-1)*sd(meuse$om, na.rm=TRUE)/sqrt(length(meuse$om))
sd.om  ## 0.54%
omm0 <- lm(om~ffreq, omm@regModel$data)
om.r <- predict(omm0, meuse.grid, se.fit=TRUE)
meuse.grid$se.fit <- om.r$se.fit
summary(meuse.grid$se.fit)
aggregate(sqrt(meuse.grid$se.fit^2+om.r$residual.scale^2), by=list(meuse.grid$ffreq), mean, na.rm=TRUE)
aggregate(meuse.grid$om.rk, by=list(meuse.grid$ffreq), mean, na.rm=TRUE)
aggregate(meuse.grid$om.sim1, by=list(meuse.grid$ffreq), sd, na.rm=TRUE)
q()
